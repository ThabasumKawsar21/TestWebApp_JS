//-----------------------------------------------------------------------
// <copyright file="DALClass.cs" company="CTS">
//     Copyright (c) . All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

/// <summary>
/// Visitor Management Common Class
/// </summary>
using System.Diagnostics.CodeAnalysis;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
[module: SuppressMessage("StyleCop.CSharp.DocumentationRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.NamingRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.ReadabilityRules", "*")]
[module: SuppressMessage("StyleCop.CSharp.SpacingRules", "*")]
namespace VisitorManagement.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;

    using System.Linq;
    using System.Net;
    using System.Security;
    using System.Transactions;
    using AzureSQLHelper;
    using System.Web;
    using VisitorManagement.Common;
    using VMSBusinessEntity;

    /// <summary>
    /// Main Class
    /// </summary>        
    /// <code>
    /// Database Class
    /// </code>
    public class DALClass
    {
        /// <summary>
        /// Get connection string
        /// </summary>
        private static string vmsConn =
            ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();

        /// <summary>
        /// Connection String
        /// </summary>
        private ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings["VMSConnectionString"];

        /// <summary>
        /// ConnectionString empty string
        /// </summary>
        private string strConnectionString = string.Empty;

        #region EncryptDecrypt
        /// <summary>
        /// Encrypt method
        /// </summary>
        /// <param name="encryptString">To Be Encrypted</param>
        /// <returns>returns string</returns>
        public static string Encrypt(string encryptString)
        {
            string codeValue = ConfigurationManager.AppSettings["CodeValue"].ToString();
            var securePassword = new SecureString();
            foreach (var c in codeValue)
            {
                securePassword.AppendChar(c);
            }

            string codeKey = Convert.ToString(Convert.ToBase64String(System.Text.Encoding.Unicode.GetBytes(new NetworkCredential(string.Empty, securePassword).Password)));
            string textToBeEncrypted = string.Concat(codeKey, "*", encryptString, "*");
            byte[] encData_byte = new byte[textToBeEncrypted.Length];
            encData_byte = System.Text.Encoding.UTF32.GetBytes(textToBeEncrypted);
            string encodedData = Convert.ToBase64String(encData_byte);
            return encodedData;
        }

        /// <summary>
        /// Text To Be Decrypted
        /// </summary>
        /// <param name="textToBeDecrypted"> Text to decrypted</param>
        /// <returns>decrypt string</returns>
        public static string Decrypt(string textToBeDecrypted)
        {
            string codeValue = ConfigurationManager.AppSettings["CodeValue"].ToString();
            var securePassword = new SecureString();
            foreach (var c in codeValue)
            {
                securePassword.AppendChar(c);
            }

            System.Text.UTF32Encoding encoder = new System.Text.UTF32Encoding();
            System.Text.Decoder utf8Decode = encoder.GetDecoder();
            byte[] todecode_byte = Convert.FromBase64String(textToBeDecrypted);
            int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
            char[] decoded_char = new char[charCount];
            utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
            string result = new string(decoded_char);
            string[] a = result.Split('*');
            string codeKey = System.Text.Encoding.Unicode.GetString(Convert.FromBase64String(a[0].ToString()));
            if (codeKey.Equals(new NetworkCredential(string.Empty, securePassword).Password))
            {
                return a[1];
            }
            else
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// Get Recent Visitors
        /// </summary>
        /// <param name="associateId">associate Id</param>
        /// <param name="noOfRecentVisitors">no Of RecentVisitors</param>
        /// <returns>Data table</returns>
        public DataTable GetRecentVisitors(string associateId, int noOfRecentVisitors)
        {
            DataTable getRecentVisitors = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetRecentVisitors_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = associateId;
                    com.Parameters.Add("@Count", SqlDbType.Int).Value = noOfRecentVisitors;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getRecentVisitors.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getRecentVisitors;
        }

        /// <summary>
        /// Get Assciate Details
        /// </summary>
        /// <param name="serachText">Serach Text</param>
        /// <returns>Data Table</returns>
        public DataTable GetAssciateDetails(string serachText)
        {
            DataTable getRecentVisitors = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetAssciateDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@SerachText", SqlDbType.VarChar, 50).Value = serachText;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getRecentVisitors.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getRecentVisitors;
        }

        /// <summary>
        /// Get track details
        /// </summary>
        /// <param name="search">parameter search</param>
        /// <param name="fromDate">parameter fromDate</param>
        /// <param name="toDate">parameter toDate</param>
        /// <param name="hostID">parameter hostID</param>
        /// <returns>returns a value</returns>
        public DataTable TrackDetails(string search, string fromDate, string toDate, string hostID)
        {
            DataTable getTrackDetails = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("TrackDetails_LocationID", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Search", SqlDbType.VarChar, 50).Value = search;
                    com.Parameters.Add("@FromDate", SqlDbType.Date).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.Date).Value = Convert.ToDateTime(toDate);
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getTrackDetails.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getTrackDetails;
        }

        /// <summary>
        /// Get track details
        /// </summary>
        /// <param name="visitDetailsId">parameter search</param>
        /// <param name="hostId">parameter fromDate</param>
        /// <returns>returns a value</returns>
        public DataTable VisitStatus(int visitDetailsId, string hostId)
        {
            DataTable getVisitStatus = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetVisitStatusByRequestId", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitDetailsId", SqlDbType.Int).Value = visitDetailsId;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 11).Value = hostId;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitStatus.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVisitStatus;
        }

        /// <summary>
        /// Saved Data
        /// </summary>
        /// <param name="search">search text</param>
        /// <param name="fromDate">from Date</param>
        /// <param name="toDate">to Date</param>
        /// <param name="hostID">host ID</param>
        /// <returns>Data Table</returns>
        public DataTable SavedData(string search, string fromDate, string toDate, string hostID)
        {
            DataTable getSavedData = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetSavedVisitorDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Search", SqlDbType.VarChar, 50).Value = search;
                    com.Parameters.Add("@FromDate", SqlDbType.Date).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.Date).Value = Convert.ToDateTime(toDate);
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 11).Value = hostID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getSavedData.Load(dr);
                        dr.Close();
                    }
                }

                getSavedData.Columns["ModifiedDate"].ReadOnly = false;
                if (getSavedData.Rows.Count > 0)
                {
                    for (int i = 0; i < getSavedData.Rows.Count; i++)
                    {
                        getSavedData.Rows[i].SetField("ModifiedDate", Convert.ToDateTime(getSavedData.Rows[i].ItemArray[1].ToString()).ToString("MM/dd/yyyy").Split(' ')[0]);
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getSavedData;
        }

        /// <summary>
        /// Get  visitor information
        /// </summary>
        /// <param name="searchvalue">search value</param>
        ///  <param name="pagenumber">search page number</param>
        ///   <param name="sortcolumn">search sort column</param>
        ///   <param name="sortorder">search sort order</param>
        ///   <param name="pagesize">search page size</param>
        /// <returns>Data table</returns>
        public DataTable GetExistingVisitorInformation(string searchvalue, int pagenumber, string sortcolumn, string sortorder, string pagesize)
        {
            if (string.IsNullOrEmpty(sortorder) || sortorder == "True")
            {
                sortorder = "ASC";
            }
            else
            {
                sortorder = "DESC";
            }

            DataTable getExistingVisitorInformation = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SearchVisitors_Revamp", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@PageNumber", SqlDbType.Int).Value = pagenumber;
                    com.Parameters.Add("@PageSize", SqlDbType.Int).Value = pagesize;
                    com.Parameters.Add("@SortColumn", SqlDbType.VarChar, 50).Value = sortcolumn;
                    com.Parameters.Add("@SortOrder", SqlDbType.VarChar, 50).Value = sortorder;
                    com.Parameters.Add("@SearchValue", SqlDbType.VarChar, 50).Value = searchvalue;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = Common.UserId();
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getExistingVisitorInformation.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getExistingVisitorInformation;
        }

        /// <summary>
        /// Get Saved Visitor Deatails By GroupId
        /// </summary>
        /// <param name="groupID">group ID</param>
        /// <returns>I List</returns>
        public IList<int> GetSavedVisitorDeatailsByGroupId(string groupID)
        {
            List<int> savedVisitorIDs = new List<int>();

            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetSavedVisitorDetailsByGroupId", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = Common.UserId();
                    com.Parameters.Add("@GroupID", SqlDbType.VarChar, 11).Value = Convert.ToInt32(groupID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            savedVisitorIDs.Add(Convert.ToInt32(dr["VisitorID"]));
                        }

                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return savedVisitorIDs;
        }

        /// <summary>
        /// Get Saved Location Details
        /// </summary>
        /// <param name="groupID">group ID</param>
        /// <returns>I List</returns>
        public IList<MultipleLocation> GetSavedLocationDetails(string groupID)
        {
            List<MultipleLocation> savedLocations = new List<MultipleLocation>();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetSavedLocationDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = Common.UserId();
                    com.Parameters.Add("@GroupID", SqlDbType.VarChar, 11).Value = Convert.ToInt32(groupID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            MultipleLocation locationDetail = new MultipleLocation();
                            string selectedVisitors = dr["SelectedVisitors"].ToString();
                            List<int> visitors = selectedVisitors.Split(',').Select(Int32.Parse).ToList();
                            List<SelectedVisitor> visitorData = new List<SelectedVisitor>();
                            foreach (var id in visitors)
                            {
                                SelectedVisitor visitor = new SelectedVisitor();
                                visitor.VisitorID = id;
                                visitorData.Add(visitor);
                            }

                            locationDetail.SelectedVisitors = visitorData;
                            locationDetail.Country = dr["Country"].ToString();
                            locationDetail.City = dr["City"].ToString();
                            locationDetail.Location = dr["Facility"].ToString();
                            locationDetail.LocationID = Convert.ToInt32(dr["LocationId"]);

                            locationDetail.FromTime = Convert.ToDateTime(dr["FomeTime"].ToString()).ToString("HH:mm");
                            locationDetail.ToTime = Convert.ToDateTime(dr["ToTime"].ToString()).ToString("HH:mm");
                            locationDetail.FromDate = Convert.ToDateTime(dr["FromDate"]).ToString("MM/dd/yyyy");
                            locationDetail.ToDate = Convert.ToDateTime(dr["ToDate"]).ToString("MM/dd/yyyy");
                            locationDetail.Reccurrence = Convert.ToString(dr["RecurrencePattern"]);
                            locationDetail.NotifyArrival = Convert.ToInt32(dr["NotifyArrival"]);
                            locationDetail.IntegarteOutlook = Convert.ToInt32(dr["IntegrateVisitor"]);
                            if (locationDetail.Reccurrence.ToUpper() == "MONTHLY")
                            {
                                locationDetail.Monthofday = Convert.ToString(dr["Occurence"]);
                                locationDetail.FromDate = Convert.ToDateTime(dr["FromDate"]).ToString("MM/yyyy");
                                locationDetail.ToDate = Convert.ToDateTime(dr["ToDate"]).ToString("MM/yyyy");
                            }
                            else if (locationDetail.Reccurrence.ToUpper() == "WEEKLY")
                            {
                                locationDetail.WeeklyDays = Convert.ToString(dr["Occurence"]);
                            }
                            else
                            {
                                locationDetail.Monthofday = string.Empty;
                                locationDetail.WeeklyDays = string.Empty;
                            }

                            savedLocations.Add(locationDetail);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return savedLocations;
        }

        /// <summary>
        /// Get Visitors details using mobile no
        /// </summary>
        /// <param name="mobileNumber">Mobile Number</param>
        /// <param name="visitorID">visitor ID</param>
        /// <param name="requestID">request ID</param>
        /// <param name="hostID">host ID</param>
        /// <returns>Data table</returns>
        public DataTable GetSearchVisitorsMobile(string mobileNumber, string visitorID, string requestID, string hostID)
        {
            DataTable getSearchVisitors_Mobile = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SearchVisitors_Mobile_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Search", SqlDbType.VarChar, 50).Value = mobileNumber;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@Visitor", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(visitorID) ? visitorID : Convert.DBNull;
                    com.Parameters.Add("@RequestID", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(requestID) ? requestID : Convert.DBNull;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getSearchVisitors_Mobile.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getSearchVisitors_Mobile;
        }

        /// <summary>
        /// Get Visitor Details
        /// </summary>
        /// <param name="visitorID">parameter visitorID</param>
        /// <returns>returns a value</returns>
        public DataTable GetVisitorDetails_VisitorID(string visitorID)
        {
            DataTable getSearchVisitors_Mobile = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetVisitorDetails_VisitorID_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(visitorID) ? visitorID : Convert.DBNull;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getSearchVisitors_Mobile.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getSearchVisitors_Mobile;
        }

        /// <summary>
        /// Get Outlook notification ID
        /// </summary>
        /// <param name="requestId">request Id</param>
        /// <returns>returns a id</returns>
        public string SelectOutlookNotificationGuid(int? requestId)
        {
            try
            {
                SqlDatabase sqlConn;
                DbCommand dbcmd;
                string guid = string.Empty;
                try
                {
                    string conn =
                        Convert.ToString(ConfigurationManager.ConnectionStrings["VMSConnectionString"]);
                    sqlConn = new SqlDatabase(conn);
                    dbcmd = sqlConn.GetStoredProcCommand("VMS_SelectMailerGUID");
                    dbcmd.CommandType = CommandType.StoredProcedure;
                    sqlConn.AddInParameter(dbcmd, "@RequestId", SqlDbType.Int, requestId);
                    using (IDataReader reader = sqlConn.ExecuteReader(dbcmd))
                    {
                        while (reader.Read())
                        {
                            if (reader.IsDBNull(0))
                            {
                                guid = string.Empty;
                            }
                            else
                            {
                                guid = reader.GetString(0);
                            }
                        }
                    }

                    return guid;
                }
                catch (SqlException ex)
                {
                    //throw ex;
                    DALClass dc = new DALClass();
                    ExceptionLogger.OneC_ExceptionLogger(ex, dc.SelectOutlookNotificationGuid(requestId));
                    return string.Empty;
                }
                finally
                {
                    sqlConn = null;
                    dbcmd = null;
                }
            }
            catch (Exception ex)
            {
                //throw ex;
                DALClass dc = new DALClass();
                ExceptionLogger.OneC_ExceptionLogger(ex, dc.SelectOutlookNotificationGuid(requestId));
                return string.Empty;
            }
        }

        /// <summary>
        /// Update Outlook ID
        /// </summary>
        /// <param name="requestIds">request Id</param>
        /// <param name="guid">parameter Id</param>
        /// <returns>returns a id</returns>
        public int UpdateOutlookNotificationGuid(List<int> requestIds, string guid)
        {
            SqlDatabase sqlConn;
            DbCommand dbcmd;
            try
            {
                string conn = Convert.ToString(ConfigurationManager.ConnectionStrings["VMSConnectionString"]);
                sqlConn = new SqlDatabase(conn);
                dbcmd = sqlConn.GetStoredProcCommand("VMS_UpdateMailerGUID");
                dbcmd.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(dbcmd, "@RequestId", SqlDbType.Structured, this.FillRequestIDs(requestIds));
                sqlConn.AddInParameter(dbcmd, "@GUID", SqlDbType.VarChar, guid.ToString());
                return sqlConn.ExecuteNonQuery(dbcmd);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn = null;
                dbcmd = null;
            }
        }

        /// <summary>
        /// Cancel Request
        /// </summary>
        /// <param name="requestId">parameter hostId</param>
        /// <param name="success">parameter Id</param>
        /// <returns>returns a value</returns>
        public int CancelRequest(int requestId, int success)
        {
            SqlDatabase sqlConn;
            DbCommand dbcmd;
            try
            {
                string conn =
                    Convert.ToString(ConfigurationManager.ConnectionStrings["VMSConnectionString"]);
                sqlConn = new SqlDatabase(conn);
                dbcmd = sqlConn.GetStoredProcCommand("UpdateStatus");
                dbcmd.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(dbcmd, "@RequestID", SqlDbType.Int, requestId);
                sqlConn.AddInParameter(dbcmd, "@Success", SqlDbType.Int, success);
                return sqlConn.ExecuteNonQuery(dbcmd);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn = null;
                dbcmd = null;
            }
        }

        /// <summary>
        /// Get Country Code
        /// </summary>
        /// <param name="country">country name</param>
        /// <returns>Data Table</returns>
        public DataTable GetCountryCode(string country)
        {
            DataSet datasetobj = new DataSet();
            DataTable dataCity = new DataTable();
            SqlDatabase sqlConn;
            DbCommand dbcmd;
            try
            {
                string conn =
                Convert.ToString(ConfigurationManager.ConnectionStrings["VMSConnectionString"]);
                sqlConn = new SqlDatabase(conn);
                dbcmd = sqlConn.GetStoredProcCommand("GetCountryCode");
                dbcmd.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(dbcmd, "@CountryId", SqlDbType.VarChar, country);
                datasetobj = sqlConn.ExecuteDataSet(dbcmd);
                return datasetobj.Tables[0];
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn = null;
                dbcmd = null;
            }
        }

        /// <summary>
        /// Get Country Code
        /// </summary>
        /// <returns>Data Table</returns>
        public DataTable GetAllCountry()
        {
            DataSet datasetobj = new DataSet();
            DataTable dataCity = new DataTable();
            SqlDatabase sqlConn;
            DbCommand dbcmd;
            try
            {
                string conn =
                Convert.ToString(ConfigurationManager.ConnectionStrings["VMSConnectionString"]);
                sqlConn = new SqlDatabase(conn);
                dbcmd = sqlConn.GetStoredProcCommand("GetAllCountryDetails");
                dbcmd.CommandType = CommandType.StoredProcedure;
                datasetobj = sqlConn.ExecuteDataSet(dbcmd);
                return datasetobj.Tables[0];
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn = null;
                dbcmd = null;
            }
        }

        /// <summary>
        /// insert visitor cart
        /// </summary>
        /// <param name="hostID">Host ID</param>
        /// <param name="visitorID">visitor ID</param>
        /// <param name="status">status ID</param>
        /// <returns>Cart Count</returns>
        public DataTable InsertVisitorsCart(string hostID, string visitorID, string status)
        {
            DataTable insertVisitorsCartcount = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorsCart_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@VisitorID", SqlDbType.VarChar, 50).Value = visitorID;
                    com.Parameters.Add("@status", SqlDbType.VarChar, 50).Value = status;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        insertVisitorsCartcount.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return insertVisitorsCartcount;
        }

        /// <summary>
        /// Get Visitor Cart
        /// </summary>
        /// <param name="hostID">Host ID</param>
        /// <returns>Data table</returns>
        public DataTable GetVistiorscartDetails(string hostID)
        {
            DataTable getVistiorscartDetails = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetVistiorscartDetails_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    con.OpenWithMSI();

                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVistiorscartDetails.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVistiorscartDetails;
        }

        /// <summary>
        /// Get User Details
        /// </summary>
        /// <param name="hostId">Host Id</param>
        /// <returns>Data table</returns>
        public DataTable GetUserDetails(string hostId)
        {
            bool useReadOnly = true;
            DataTable getUserDetails = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }
            SqlConnection con = GetSqlConnection(useReadOnly);
            //SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetAssociateDetails_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateId", SqlDbType.VarChar, 50).Value = hostId;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getUserDetails.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getUserDetails;
        }

        /// <summary>
        /// Get Host During Visitor
        /// </summary>
        /// <param name="visitorID">parameter visitorID</param>
        /// <returns>returns a value</returns>
        public DataTable GetHostIDusingVisitorID(int visitorID)
        {
            DataTable getHostID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetHostIDusingVisitorID", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = visitorID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getHostID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getHostID;
        }

        /// <summary>
        /// Get Country Names
        /// </summary>
        /// <param name="cityname">City name</param>
        /// <returns>Data table</returns>
        public DataTable GetCountryname(string cityname)
        {
            DataTable getCountryname = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetCountrybyCity", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = cityname;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getCountryname.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getCountryname;
        }

        /// <summary>
        /// Insert Visitor Master Details
        /// </summary>
        /// <param name="firstName">parameter firstName </param>
        /// <param name="lastName">parameter lastName</param>
        /// <param name="company">parameter company</param>
        /// <param name="designation">parameter designation</param>
        /// <param name="country">parameter country</param>
        /// <param name="mobileNumber">parameter mobileNumber</param>
        /// <param name="emailId">parameter email</param>
        /// <param name="gender">parameter gender</param>
        /// <param name="isconfidential">parameter is confidential</param>
        /// <param name="hostID">parameter host ID</param>
        ///  <param name="requestID">parameter request ID</param>
        /// <returns>returns a value</returns>
        public DataTable InsertVisitorMasterDetails(string firstName, string lastName, string company, string designation, string country, string mobileNumber, string emailId, string gender, int isconfidential, string hostID, int requestID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorMasterDetails_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@FirstName", SqlDbType.VarChar, 50).Value = firstName;
                    com.Parameters.Add("@LastName", SqlDbType.VarChar, 50).Value = lastName;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@Designation", SqlDbType.VarChar, 50).Value = designation;
                    com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
                    com.Parameters.Add("@MobileNumber", SqlDbType.VarChar, 20).Value = mobileNumber;
                    com.Parameters.Add("@EmailId", SqlDbType.VarChar, 50).Value = emailId;
                    com.Parameters.Add("@Gender", SqlDbType.VarChar, 50).Value = gender;
                    com.Parameters.Add("@isconfidential", SqlDbType.Bit).Value = isconfidential;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Cart Location
        /// </summary>
        /// <param name="cartID">Cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetCartLocation(int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetCartLocation", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get All cart Location
        /// </summary>
        /// <param name="associateID">associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetAllcartLocation(string associateID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetAllcartLocation", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 10).Value = associateID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get All Cart Details
        /// </summary>
        /// <param name="associateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetAllCartDetails(string associateID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetAllCartDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 10).Value = associateID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Inser Visitor Master
        /// </summary>
        /// <param name="name">visitor Name</param>
        /// <param name="company">visitor Company</param>
        /// <param name="country">visitor country</param>
        /// <param name="mobileNo">visitor mobile no</param>
        /// <param name="createdBy">Created By</param>
        /// <param name="isConfidance">Is Confidance</param>
        /// <param name="visitormasterID">visitor masterID</param>
        /// <param name="others">Otjers type</param>
        /// <param name="emailID">email ID</param>
        /// <returns>Data Table</returns>
        public DataTable InserVisitorMaster(string name, string company, string country, string mobileNo, string createdBy, string isConfidance, string visitormasterID, string others, string emailID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InserVisitorMaster", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 100).Value = name;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 100).Value = company;
                    com.Parameters.Add("@Country", SqlDbType.VarChar, 100).Value = country;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 100).Value = mobileNo;
                    com.Parameters.Add("@CreatedBy", SqlDbType.VarChar, 100).Value = createdBy;
                    com.Parameters.Add("@IsConfidance", SqlDbType.VarChar, 100).Value = isConfidance;
                    com.Parameters.Add("@MasterParentID", SqlDbType.VarChar, 100).Value = visitormasterID;
                    com.Parameters.Add("@Others", SqlDbType.VarChar, 100).Value = others;
                    com.Parameters.Add("@EmailID", SqlDbType.VarChar, 50).Value = emailID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        public DataTable getTimeZoneInformation(string LocationName)
        {
            DataTable TimeZoneDescription = new DataTable();
            var offsetval = String.Empty;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;


            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetTimeZonebyFacility", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = LocationName;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        TimeZoneDescription.Load(dr);
                        dr.Close();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(TimeZoneDescription.Rows[0].ItemArray[0])))
                {
                    TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById(Convert.ToString(TimeZoneDescription.Rows[0].ItemArray[0]));
                    if (tzi != null)
                    {
                        TimeSpan offset = tzi.GetUtcOffset(DateTime.Now);
                        offsetval = ((offset.TotalMinutes) * -1).ToString();
                    }
                    else
                    {
                        offsetval = "-330";
                    }
                }
                else
                {
                    offsetval = "-330";
                }
            }
            catch (Exception ex)
            {

            }
            return TimeZoneDescription;
        }


        /// <summary>
        /// Insert Visitor Request
        /// </summary>
        /// <param name="visitorID">Visitor ID</param>
        /// <param name="facility">Visitor facility</param>
        /// <param name="purpose">Visitor type</param>
        /// <param name="hostID">Visitor hostID</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="fromTime">From Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="createdby">Created by</param>
        /// <param name="permitITEquipments">Permit IT Equipments</param>
        /// <param name="parentReferenceId">Parent ReferenceId</param>
        /// <param name="bulkUpload">Bulk Upload</param>
        /// <param name="masterVisitorID">master VisitorID</param>
        /// <returns>Data Table</returns>
        public DataTable InsertVisitorRequest(int visitorID, string facility, string purpose, string hostID, string fromDate, string toDate, string fromTime, string toTime, string createdby, int permitITEquipments, string parentReferenceId, int bulkUpload, int masterVisitorID)
        {
            DataTable getVisitorID = new DataTable();
            DataTable TimeZoneDescription = new DataTable();
            var offsetval = String.Empty;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;


            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetTimeZonebyFacility", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = facility;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        TimeZoneDescription.Load(dr);
                        dr.Close();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(TimeZoneDescription.Rows[0].ItemArray[0])))
                {
                    TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById(Convert.ToString(TimeZoneDescription.Rows[0].ItemArray[0]));
                    if (tzi != null)
                    {
                        TimeSpan offset = tzi.GetUtcOffset(DateTime.Now);
                        offsetval = ((offset.TotalMinutes) * -1).ToString();
                    }
                    else
                    {
                        offsetval = "-330";
                    }
                }
                else
                {
                    offsetval = "-330";
                }

                using (SqlCommand com = new SqlCommand("usp_InsertVisitorRequest", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = visitorID;
                    com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = facility;
                    com.Parameters.Add("@Purpose", SqlDbType.VarChar, 100).Value = purpose;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 100).Value = hostID;
                    com.Parameters.Add("@FromDate", SqlDbType.VarChar, 100).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.VarChar, 100).Value = Convert.ToDateTime(toDate);
                    com.Parameters.Add("@FromTime", SqlDbType.VarChar, 100).Value = fromTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 100).Value = toTime;
                    com.Parameters.Add("@Createdby", SqlDbType.VarChar, 100).Value = createdby;
                    com.Parameters.Add("@PermitITEquipments", SqlDbType.Int).Value = permitITEquipments;
                    com.Parameters.Add("@ParentReferenceId", SqlDbType.VarChar, 100).Value = parentReferenceId;
                    com.Parameters.Add("@BulkUpload", SqlDbType.Int).Value = bulkUpload;
                    com.Parameters.Add("@MasterVisitorID", SqlDbType.Int).Value = masterVisitorID;
                    com.Parameters.Add("@Externalrequestcamefrom", SqlDbType.VarChar, 50).Value = DBNull.Value;
                    com.Parameters.Add("@offval", SqlDbType.VarChar, 50).Value = offsetval;
                    //  con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Insert Visitor Master Details Popup
        /// </summary>
        /// <param name="name">parameter firstName</param>
        /// <param name="lastName">parameter lastName</param>
        /// <param name="company">parameter company</param>
        /// <param name="designation">parameter designation</param>
        /// <param name="country">parameter country</param>
        /// <param name="mobileNumber">parameter mobile Number</param>
        /// <param name="emailId">parameter email</param>
        /// <param name="gender">parameter gender</param>
        /// <param name="isconfidential">parameter is confidential</param>
        /// <param name="hostID">parameter host ID</param>
        /// <param name="visitorType">parameter visitor Type</param>
        /// <param name="others">parameter others</param>
        /// <param name="isConfidance">is Confidance</param>
        /// <param name="emailID">email ID</param>
        /// <returns>returns a value</returns>
        public DataTable InsertVisitorMasterDetailsPopup(string name, string company, string mobileNumber, string visitorType, string others, string hostID, string isConfidance, string emailID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorMasterDetailsRevamp", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@FirstName", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@MobileNumber", SqlDbType.VarChar, 50).Value = mobileNumber;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@visitortype", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@others", SqlDbType.VarChar, 50).Value = others;
                    com.Parameters.Add("@IsConfidance", SqlDbType.VarChar, 10).Value = isConfidance;
                    com.Parameters.Add("@EmailID", SqlDbType.VarChar, 50).Value = emailID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Insert Visitor Cart
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile No</param>
        /// <param name="name">Visitor Name</param>
        /// <param name="organization">Visitor Company</param>
        /// <param name="nativeCountry">Visitor country</param>
        /// <param name="locationName">Visitor location</param>
        /// <param name="hostId">Host Id</param>
        /// <param name="date">Meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <param name="isDatacenterAccess">is DatacenterAccess</param>
        /// <param name="isVisitorConfidance">Is VisitorConfidance</param>
        /// <param name="isEquipment">Is Equipment</param>\
        /// <param name="isMultiplelocation">is Multiplelocation</param>
        /// <param name="others">oth ers</param>
        /// <param name="locationCount">location Count</param>
        /// <param name="locationID">location ID</param>
        /// <param name="euipmqntUniqID">euipmqnt Uniq ID</param>
        /// <returns>Data Table</returns>
        public DataTable InsertVisitorCart(string visitorType, string mobileNo, string name, string organization, string nativeCountry, string locationName, string hostId, string date, string startTime, string toTime, string associateID, int isDatacenterAccess, int isVisitorConfidance, int isEquipment, int isMultiplelocation, string others, int locationCount, string locationID, int euipmqntUniqID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertVisitorCart", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 50).Value = mobileNo;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Organization", SqlDbType.VarChar, 50).Value = organization;
                    com.Parameters.Add("@NativeCountry", SqlDbType.VarChar, 50).Value = nativeCountry;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(hostId) ? hostId : Convert.DBNull;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    com.Parameters.Add("@isDatacenterAccess", SqlDbType.Int).Value = isDatacenterAccess;
                    com.Parameters.Add("@IsVisitorConfidance", SqlDbType.Int).Value = isVisitorConfidance;
                    com.Parameters.Add("@IsEquipment", SqlDbType.Int).Value = isEquipment;
                    com.Parameters.Add("@IsMultiplelocation", SqlDbType.Int).Value = isMultiplelocation;
                    com.Parameters.Add("@LocationCount", SqlDbType.Int).Value = locationCount;
                    com.Parameters.Add("@Others", SqlDbType.VarChar, 100).Value = others;
                    com.Parameters.Add("@LocationID", SqlDbType.VarChar, 100).Value = locationID;
                    com.Parameters.Add("@EuipmqntUniqID", SqlDbType.Int).Value = euipmqntUniqID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// check already exist
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile No</param>
        /// <param name="name">Visitor Name</param>
        /// <param name="organization">Visitor Company</param>
        /// <param name="nativeCountry">Visitor country</param>
        /// <param name="locationName">Visitor location</param>
        /// <param name="date">Meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable checkalreadyexist(string visitorType, string mobileNo, string name, string organization, string nativeCountry, string locationName, string date, string startTime, string toTime, string associateID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_Checkalreadyexist", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 50).Value = mobileNo;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Organization", SqlDbType.VarChar, 50).Value = organization;
                    com.Parameters.Add("@NativeCountry", SqlDbType.VarChar, 50).Value = nativeCountry;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }
        //597397 checking for Duplicate Request 
        /// <summary>
        /// check already exist
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile No</param>
        /// <param name="name">Visitor Name</param>
        /// <param name="organization">Visitor Company</param>
        /// <param name="nativeCountry">Visitor country</param>
        /// <param name="locationName">Visitor location</param>
        /// <param name="date">Meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable checkDuplicaterequest(string visitorType, string locationName, string date, string startTime, string toTime, int mastervisitorID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("CheckDuplicateRequest", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@MasterVisitorID", SqlDbType.VarChar, 50).Value = mastervisitorID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        //597397 checking for Duplicate Request
        /// <summary>
        /// check already exist
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile No</param>
        /// <param name="name">Visitor Name</param>
        /// <param name="organization">Visitor Company</param>
        /// <param name="nativeCountry">Visitor country</param>
        /// <param name="locationName">Visitor location</param>
        /// <param name="date">Meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable checkDuplicaterequestforupdate(string visitorType, string locationName, string date, string startTime, string toTime, string name, string company, string mobileNo, string others)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }



            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("CheckDuplicateRequestforupdate", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Organization", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@Mobilenumber", SqlDbType.VarChar, 50).Value = mobileNo;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }



            return getVisitorID;
        }


        //597397- End Duplicate request - 
        /// <summary>
        /// Get Location Descrition
        /// </summary>
        /// <param name="locationID"></param>
        /// <returns></returns>
        public DataTable GetLocationDescrition(string locationID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetLocationDescrition", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@LocationID", SqlDbType.VarChar, 100).Value = locationID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }


        /// <summary>
        /// Insert Cart Location
        /// </summary>
        /// <param name="locationName">Location Name</param>
        /// <param name="hostId">Host Id</param>
        /// <param name="date">meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <param name="cartID">Cart ID</param>
        /// <param name="cartlocationNameID">cart location NameID</param>
        /// <param name="status">Sta tus</param>
        /// <returns>Data Table</returns>
        public DataTable InsertCartLocation(string locationName, string hostId, string date, string startTime, string toTime, string associateID, int cartID, string cartlocationNameID, string status)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertCartLocation", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostId;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@EndTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    com.Parameters.Add("@CartLocationNameID", SqlDbType.VarChar, 100).Value = cartlocationNameID;
                    com.Parameters.Add("@Status", SqlDbType.VarChar, 10).Value = status;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Update Cart Details
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile no</param>
        /// <param name="name">Visitor Name</param>
        /// <param name="organization">Visitor Company</param>
        /// <param name="nativeCountry">Visitor Country</param>
        /// <param name="locationName">Location Name</param>
        /// <param name="hostId">Host Id</param>
        /// <param name="date">meeting Date</param>
        /// <param name="startTime">Start Time</param>
        /// <param name="toTime">To Time</param>
        /// <param name="associateID">Associate ID</param>
        /// <param name="isDatacenterAccess">is DatacenterAccess</param>
        /// <param name="isVisitorConfidance">Is VisitorConfidance</param>
        /// <param name="isEquipment">Is Equipment</param>
        /// <param name="cartID">Cart ID</param>
        /// <param name="ismultilocation">Is multilocation</param>
        /// <param name="locationCount">Location Count</param>
        /// <param name="others">Oth ers</param>
        /// <param name="locationID">Location ID</param>
        /// <param name="euipmqntUniqID">euipmqnt UniqID</param>
        /// <returns>DataTable</returns>
        public DataTable UpdateCartDetails(string visitorType, string mobileNo, string name, string organization, string nativeCountry, string locationName, string hostId, string date, string startTime, string toTime, string associateID, int isDatacenterAccess, int isVisitorConfidance, int isEquipment, int cartID, int ismultilocation, string others, int locationCount, string locationID, int euipmqntUniqID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_UpdateCartDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 50).Value = mobileNo;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Organization", SqlDbType.VarChar, 50).Value = organization;
                    com.Parameters.Add("@NativeCountry", SqlDbType.VarChar, 50).Value = nativeCountry;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 50).Value = locationName;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = hostId;
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 5000).Value = date;
                    com.Parameters.Add("@StartTime", SqlDbType.VarChar, 50).Value = startTime;
                    com.Parameters.Add("@ToTime", SqlDbType.VarChar, 50).Value = toTime;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    com.Parameters.Add("@isDatacenterAccess", SqlDbType.Int).Value = isDatacenterAccess;
                    com.Parameters.Add("@IsVisitorConfidance", SqlDbType.Int).Value = isVisitorConfidance;
                    com.Parameters.Add("@IsEquipment", SqlDbType.Int).Value = isEquipment;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    com.Parameters.Add("@Ismultilocation", SqlDbType.Int).Value = ismultilocation;
                    com.Parameters.Add("@LocationCount", SqlDbType.Int).Value = locationCount;
                    com.Parameters.Add("@Others", SqlDbType.VarChar, 100).Value = others;
                    com.Parameters.Add("@LocationID", SqlDbType.VarChar, 100).Value = locationID;
                    com.Parameters.Add("@EuipmqntUniqID", SqlDbType.Int).Value = euipmqntUniqID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Update Equipment TempID
        /// </summary>
        /// <param name="EquipmentuniqueID">Equipment uniqueID</param>
        /// <param name="tempID">temp ID</param>
        /// <returns>Data Table</returns>
        public DataTable UpdateEquipmentTempID(int EquipmentuniqueID, int tempID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_UpdateEquipmentTempID", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@EquipmentuniqueID", SqlDbType.Int).Value = EquipmentuniqueID;
                    com.Parameters.Add("@TempID", SqlDbType.Int).Value = tempID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Equipment Details
        /// </summary>
        /// <param name="visitorID"></param>
        /// <returns></returns>
        public DataTable GetEquipmentDetails(int visitorID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetEquipmentDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = visitorID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Equipment Details
        /// </summary>
        /// <param name="visitorID"></param>
        /// <returns></returns>
        public DataTable GetEquipmentDetailsfordelete(int visitorID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetEquipmentDetailsfordelete", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = visitorID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Dummy Equipment Details
        /// </summary>
        /// <param name="cartID">cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetDummyEquipmentDetails(int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetDummyEquipmentDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Delete Equipment
        /// </summary>
        /// <param name="equipmentID">equipment ID</param>
        /// <returns>Data Table</returns>
        public DataTable DeleteEquipment(string equipmentID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("Delete_VisitorEquipments", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@EquipmentID", SqlDbType.Int).Value = equipmentID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Dummy Equipment Details
        /// </summary>
        /// <param name="cartID">cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetDummyEquipmentDetails1(int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetDummyEquipmentDetails1", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }


        /// <summary>
        /// Update Cart Profil details
        /// </summary>
        /// <param name="visitorType">Visitor Type</param>
        /// <param name="mobileNo">Visitor mobile No</param>
        /// <param name="name">Visitor name</param>
        /// <param name="organization">Visitor company</param>
        /// <param name="associateID">Associate ID</param>
        /// <param name="isEquipment">Is Equipment</param>
        /// <param name="cartID">Cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable UpdateCartProfildetails(string visitorType, string mobileNo, string name, string organization, string associateID, int isEquipment, int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_UpdateCartProfildetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 50).Value = mobileNo;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@Organization", SqlDbType.VarChar, 50).Value = organization;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    com.Parameters.Add("@IsEquipment", SqlDbType.Int).Value = isEquipment;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Visitor Cart
        /// </summary>
        /// <param name="AssociateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetVisitorCart(string AssociateID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetCartDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = AssociateID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Delete Cart
        /// </summary>
        /// <param name="AssociateID">Associate ID</param>
        /// <param name="cartID">cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable DeleteCart(string AssociateID, int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_DeleteCart", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = AssociateID;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Cart user Details
        /// </summary>
        /// <param name="associateID">Associate ID</param>
        /// <param name="cartID">cart ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetCartuserDetails(string associateID, int cartID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetCartuserDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@AssociateID", SqlDbType.VarChar, 50).Value = associateID;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = cartID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Update User Profile
        /// </summary>
        /// <param name="firstName">parameter firstName</param>
        /// <param name="lastName">parameter lastName</param>
        /// <param name="company">parameter company</param>
        /// <param name="designation">parameter designation</param>
        /// <param name="country">parameter country</param>
        /// <param name="mobileNumber">parameter mobileNumber</param>
        /// <param name="emailId">parameter emailId</param>
        /// <param name="gender">parameter gender</param>
        /// <param name="isconfidential">parameter confidential</param>
        /// <param name="hostID">parameter hostID</param>
        /// <param name="visitorID">parameter visitorID</param>
        /// <returns>returns a value</returns>
        public DataTable UpdateUserProfile(string firstName, string lastName, string company, string designation, string country, string mobileNumber, string emailId, string gender, int isconfidential, string hostID, int visitorID)
        {
            DataTable getVisitorID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("UpdateUserProfile_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@FirstName", SqlDbType.VarChar, 50).Value = firstName;
                    com.Parameters.Add("@LastName", SqlDbType.VarChar, 50).Value = lastName;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@Designation", SqlDbType.VarChar, 50).Value = designation;
                    com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
                    com.Parameters.Add("@MobileNumber", SqlDbType.VarChar, 50).Value = mobileNumber;
                    com.Parameters.Add("@EmailId", SqlDbType.VarChar, 50).Value = emailId;
                    com.Parameters.Add("@Gender", SqlDbType.VarChar, 50).Value = gender;
                    com.Parameters.Add("@isconfidential", SqlDbType.Bit).Value = isconfidential;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@visitorID", SqlDbType.Int).Value = Convert.ToInt32(visitorID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVisitorID;
        }

        /// <summary>
        /// Get Existing Visitor Information Count
        /// </summary>
        /// <param name="hostId">host Id</param>
        /// <param name="name">Na me</param>
        /// <returns>Visitor Information</returns>
        public int GetExistingVisitorInformationCount(string name, string hostId)
        {
            ////DataSet laptopInfo = new DataSet();
            int similarvisitorscount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection conn = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SimilarisitorsCount_Revamp", conn))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@SearchValue", SqlDbType.VarChar, 50).Value = name;
                    com.Parameters.Add("@HostId", SqlDbType.VarChar, 50).Value = hostId;
                    conn.OpenWithMSI();
                    ////using (SqlDataReader dr = com.ExecuteReader())
                    ////{
                    ////    while (dr.Read())
                    ////    {
                    similarvisitorscount = Convert.ToInt32(com.ExecuteScalar());//// Convert.ToInt32(dr["TCount"]);
                    ////    }
                    ////}
                }
            }
            catch (SqlException ex)
            {
                similarvisitorscount = 0;
                throw ex;

            }
            finally
            {
                conn.Close();
            }

            return similarvisitorscount;
        }

        /// <summary>
        /// Save Request
        /// </summary>
        /// <param name="locationDetails">location Details</param>
        /// <param name="visitorData">visitor Data</param>
        /// <param name="groupID">group ID</param>
        /// <returns>I nt</returns>
        public int SaveRequest(List<MultipleLocation> locationDetails, List<MultipleVisitor> visitorData, string groupID)
        {
            int isSuccess = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SaveVisitorRequest", con))
                {
                    com.CommandType = CommandType.StoredProcedure;

                    com.Parameters.Add("@SavedLocationDetails", SqlDbType.Structured).Value = this.FillSavedLocationDetails(locationDetails);
                    com.Parameters.Add("@SavedVisitorDCDetails", SqlDbType.Structured).Value = this.FillSavedVisitorDCDetails(visitorData);
                    com.Parameters.Add("@SavedVisitorArgentinaDetails", SqlDbType.Structured).Value = this.FillSavedArgentinaDCDetails(visitorData);
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = Common.UserId();
                    com.Parameters.Add("@GroupId", SqlDbType.Int).Value = string.IsNullOrEmpty(groupID) ? 0 : Convert.ToInt32(groupID);

                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            isSuccess = Convert.ToInt32(dr["ReturnStatus"]);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                isSuccess = 0;
                throw ex;

            }
            finally
            {
                con.Close();
            }

            return isSuccess;
        }



        //public int SaveVisitorRequest(string country, string city, string location, string locationID, int notifyArrival, int integrateVisitor, string fromTime, string toTime, string fromDate, string toDate, string patternText, string recurrencePattern, string monthofday, string groupID,List<SavedRequest> savedRequest)
        //{
        //    int returnStatus = 0;
        //    string occurrence = string.Empty;
        //    occurrence = patternText.ToUpper() == "MONTHLY" ? monthofday : recurrencePattern;

        //    if (this.connectionStringSettings != null)
        //    {
        //        this.strConnectionString = this.connectionStringSettings.ConnectionString;
        //    }

        //    SqlConnection con = new SqlConnection(this.strConnectionString);
        //    try
        //    {
        //        using (SqlCommand com = new SqlCommand("SaveVisitorRequest", con))
        //        {
        //            com.CommandType = CommandType.StoredProcedure;

        //            com.Parameters.Add("@SavedVisitorIDs", SqlDbType.Structured).Value = this.FillSavedVisitorDetails(savedRequest);
        //            com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
        //            com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = city;
        //            com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = location;
        //            com.Parameters.Add("@LocationId", SqlDbType.Int).Value = locationID;
        //            com.Parameters.Add("@FromTime", SqlDbType.NVarChar).Value = fromTime;
        //            com.Parameters.Add("@ToTime", SqlDbType.NVarChar).Value = toTime;
        //            com.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = fromDate;
        //            com.Parameters.Add("@ToDate", SqlDbType.DateTime).Value = toDate;
        //            com.Parameters.Add("@RecurrencePattern", SqlDbType.NVarChar).Value = patternText;
        //            com.Parameters.Add("@Occurence", SqlDbType.NVarChar).Value = occurrence;
        //            com.Parameters.Add("@CreatedDate", SqlDbType.DateTime).Value = DateTime.Now;
        //            com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = Common.UserId();
        //            com.Parameters.Add("@OutlookNotfication", SqlDbType.Int).Value = integrateVisitor;
        //            com.Parameters.Add("@ISSMSEnabled", SqlDbType.Int).Value = notifyArrival;
        //            com.Parameters.Add("@GroupId", SqlDbType.Int).Value = string.IsNullOrEmpty(groupID)?0:Convert.ToInt32(groupID);

        //            con.Open();
        //            using (SqlDataReader dr = com.ExecuteReader())
        //            {
        //                while (dr.Read())
        //                {
        //                    returnStatus = Convert.ToInt32(dr["ReturnStatus"]);
        //                }
        //            }
        //        }
        //    }
        //    catch (SqlException ex)
        //    {
        //        returnStatus = 0;
        //        throw ex;

        //    }
        //    finally
        //    {
        //        con.Close();
        //    }

        //    return returnStatus;
        //}

        /// <summary>
        /// submit multiple/single visitor request
        /// </summary>
        /// <param name="dc_Details">visitors details</param>
        /// <param name="country">value name</param>
        /// <param name="city">value city</param>
        /// <param name="location">value location</param>
        /// <param name="fromDate">value fromDate</param>
        /// <param name="toDate">value toDate</param>
        /// <param name="fromTime">value fromTime</param>
        /// <param name="toTime">value toTime</param>
        /// <param name="patternText">value patternText</param>
        /// <param name="occurrence">value occurrence</param>
        /// <param name="comments">value comments</param>
        /// <param name="locationID">value locationID</param>
        /// <param name="offset">value offset</param>
        /// <param name="hostID">value hostID</param>
        /// <param name="ipaddress">value address</param>
        /// <param name="integrateVisitor">value integrate Visitor</param>
        /// <param name="isSMSEnabled">value Enabled</param>
        /// <param name="createdDate">value created Date</param>
        /// <param name="groupID">group ID</param>
        /// <returns>visitor details and status</returns>
        public string SubmitVisitorRequest(List<VisitorDCDetails> dc_Details, string country, string city, string location, string fromDate, string toDate, string fromTime, string toTime, string patternText, string occurrence, string comments, string locationID, string offset, string hostID, string ipaddress, int integrateVisitor, int isSMSEnabled, DateTime createdDate, string groupID)
        {
            ////List<MultipleVisitor> visitorDetails = new List<MultipleVisitor>();
            int returnStatus = 0;

            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SubmitVisitRequest_Multiple", con))
                {
                    com.CommandType = CommandType.StoredProcedure;

                    com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
                    com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = city;
                    com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = location;
                    com.Parameters.Add("@FromDate", SqlDbType.NVarChar).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.NVarChar).Value = Convert.ToDateTime(toDate);
                    com.Parameters.Add("@FromTime", SqlDbType.NVarChar).Value = fromTime;
                    com.Parameters.Add("@ToTime", SqlDbType.NVarChar).Value = toTime;
                    com.Parameters.Add("@RecurrencePattern", SqlDbType.NVarChar).Value = patternText;
                    com.Parameters.Add("@Occurence", SqlDbType.NVarChar).Value = occurrence;
                    //// com.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = comments; comments are not passed from front end from old code, yet implemented.
                    com.Parameters.Add("@CreatedDate", SqlDbType.DateTime).Value = createdDate;
                    com.Parameters.Add("@LocationId", SqlDbType.NVarChar).Value = locationID;
                    com.Parameters.Add("@Offset", SqlDbType.VarChar, 50).Value = offset;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@IPAddress", SqlDbType.VarChar, 50).Value = ipaddress;
                    com.Parameters.Add("@OutlookNotfication", SqlDbType.VarChar, 50).Value = integrateVisitor;
                    com.Parameters.Add("@ISSMSEnabled", SqlDbType.VarChar, 50).Value = isSMSEnabled;
                    com.Parameters.Add("@VisitorID", SqlDbType.Structured).Value = this.FillVisitorDetails(dc_Details);
                    com.Parameters.Add("@GroupID", SqlDbType.Int).Value = String.IsNullOrEmpty(groupID) ? 0 : Convert.ToInt32(groupID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            returnStatus = Convert.ToInt32(dr["ReturnStatus"]);
                        }

                        //if (returnStatus == 1)
                        //{
                        //    dr.NextResult();

                        //    while (dr.Read())
                        //    {
                        //        MultipleVisitor detail = new MultipleVisitor();
                        //        detail.VisitorID = Convert.ToInt32(dr["VisitorID"]);
                        //        detail.RequestID = Convert.ToInt32(dr["RequestID"]);
                        //        detail.Name = dr["Name"].ToString();
                        //        detail.Organization = dr["Organization"].ToString();
                        //        detail.MobileNumber = dr["MobileNo"].ToString();
                        //        detail.Purpose = dr["Purpose"].ToString();
                        //        detail.EmailID = dr["EmailID"].ToString();
                        //        visitorDetails.Add(detail);
                        //    }
                        //}
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return returnStatus.ToString();
        }

        /// <summary>
        /// submit multiple/single visitor request
        /// </summary>
        /// <param name="interviewCandidateList">visitors details</param>
        /// <param name="country">country name</param>
        /// <param name="city">value city</param>
        /// <param name="location">value location</param>
        /// <param name="fromDate">value fromDate</param>
        /// <param name="toDate">value toDate</param>
        /// <param name="fromTime">value fromTime</param>
        /// <param name="toTime">value toTime</param>
        /// <param name="patternText">value patternText</param>
        /// <param name="occurrence">value occurrence</param>
        /// <param name="locationID">value locationID</param>
        /// <param name="offset">value offset</param>
        /// <param name="hostID">value country hostID</param>
        /// <param name="ipaddress">country address</param>
        /// <param name="integrateVisitor">value integrateVisitor</param>
        /// <param name="isSMSEnabled">value Enabled</param>
        /// <param name="createdDate">created Date</param>
        /// <param name="visitorType">visitor Type</param>
        /// <returns>visitor details and status</returns>
        public string SubmitBulkUpload(DataTable interviewCandidateList, string country, string city, string location, string fromDate, string toDate, string fromTime, string toTime, string patternText, string occurrence, string locationID, string offset, string hostID, string ipaddress, int integrateVisitor, int isSMSEnabled, DateTime createdDate, string visitorType)
        {
            ////List<MultipleVisitor> interviewCandidDetails = new List<MultipleVisitor>();
            int returnStatus = 0;

            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SubmitVisitRequest_BulkUpload", con))
                {
                    com.CommandType = CommandType.StoredProcedure;

                    com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
                    com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = city;
                    com.Parameters.Add("@Facility", SqlDbType.VarChar, 100).Value = location;
                    com.Parameters.Add("@FromDate", SqlDbType.NVarChar).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.NVarChar).Value = Convert.ToDateTime(toDate);
                    com.Parameters.Add("@FromTime", SqlDbType.NVarChar).Value = fromTime;
                    com.Parameters.Add("@ToTime", SqlDbType.NVarChar).Value = toTime;
                    com.Parameters.Add("@RecurrencePattern", SqlDbType.NVarChar).Value = patternText;
                    com.Parameters.Add("@Occurence", SqlDbType.NVarChar).Value = occurrence;
                    //// com.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = comments; comments are not passed from front end from old code, yet implemented.
                    com.Parameters.Add("@CreatedDate", SqlDbType.DateTime).Value = createdDate;
                    com.Parameters.Add("@LocationId", SqlDbType.NVarChar).Value = locationID;
                    com.Parameters.Add("@Offset", SqlDbType.VarChar, 50).Value = offset;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@IPAddress", SqlDbType.VarChar, 50).Value = ipaddress;
                    com.Parameters.Add("@OutlookNotfication", SqlDbType.VarChar, 50).Value = integrateVisitor;
                    com.Parameters.Add("@ISSMSEnabled", SqlDbType.VarChar, 50).Value = isSMSEnabled;
                    com.Parameters.Add("@VisitorDetails", SqlDbType.Structured).Value = this.FillCandidateList(interviewCandidateList);
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            returnStatus = Convert.ToInt32(dr["ReturnStatus"]);
                        }

                        //dr.NextResult();

                        //while (dr.Read())
                        //{
                        //    MultipleVisitor detail = new MultipleVisitor();
                        //    detail.VisitorID = Convert.ToInt32(dr["VisitorID"]);
                        //    detail.RequestID = Convert.ToInt32(dr["RequestID"]);
                        //    detail.Name = dr["Name"].ToString();
                        //    detail.Organization = dr["Organization"].ToString();
                        //    detail.MobileNumber = dr["MobileNo"].ToString();
                        //    detail.Purpose = dr["Purpose"].ToString();
                        //    detail.EmailID = dr["EmailID"].ToString();
                        //    interviewCandidDetails.Add(detail);
                        //}
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return returnStatus.ToString();
        }

        /// <summary>
        /// Insert Visitor Request
        /// </summary>
        /// <param name="visitorID">parameter visitorID</param>
        /// <param name="country">parameter Country</param>
        /// <param name="city">parameter City</param>
        /// <param name="location">parameter Location</param>
        /// <param name="purpose">parameter Purpose</param>
        /// <param name="fromdate">parameter from date</param>
        /// <param name="todate">parameter to date</param>
        /// <param name="fromtime">parameter from time</param>
        /// <param name="totime">parameter to time</param>
        /// <param name="recurrence">parameter recurrence</param>
        /// <param name="occurence">parameter value</param>
        /// <param name="comments">parameter comments</param>
        /// <param name="locationID">parameter Location ID</param>
        /// <param name="offset">parameter offset</param>
        /// <param name="hostID">parameter HostID</param>
        /// <param name="ip_Address">parameter Address</param>
        /// <param name="isSMSEnable">parameter is Enable</param>
        /// <param name="bulkUpload">parameter BulkUpload</param>
        /// <param name="status">parameter Status</param>
        /// <param name="isperminete">parameter values</param>
        /// <param name="requestID">parameter request ID</param>
        /// <returns>returns a value</returns>
        public DataTable InsertVisitorRequest(string visitorID, string country, string city, string location, string purpose, string fromdate, string todate, string fromtime, string totime, string recurrence, string occurence, string comments, string locationID, string offset, string hostID, string ip_Address, int isSMSEnable, int bulkUpload, string status, int isperminete, int requestID)
        {
            DataTable getRequestID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorRequest_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@visitorID", SqlDbType.Int).Value = Convert.ToInt32(visitorID);
                    com.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = country;
                    com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = city;
                    com.Parameters.Add("@Location", SqlDbType.VarChar, 50).Value = location;
                    com.Parameters.Add("@Purpose", SqlDbType.VarChar, 50).Value = purpose;
                    com.Parameters.Add("@fromdate", SqlDbType.Date).Value = fromdate;
                    com.Parameters.Add("@todate", SqlDbType.Date).Value = todate;
                    com.Parameters.Add("@fromtime", SqlDbType.Time).Value = fromtime;
                    com.Parameters.Add("@totime", SqlDbType.Time).Value = totime;
                    com.Parameters.Add("@recurrence", SqlDbType.VarChar, 50).Value = recurrence;
                    com.Parameters.Add("@occurence", SqlDbType.VarChar, 50).Value = occurence;
                    com.Parameters.Add("@comments", SqlDbType.VarChar, 50).Value = comments;
                    com.Parameters.Add("@LocationID", SqlDbType.VarChar, 50).Value = locationID;
                    com.Parameters.Add("@offset", SqlDbType.VarChar, 50).Value = offset;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@ipAddress", SqlDbType.VarChar, 50).Value = ip_Address;
                    com.Parameters.Add("@isSMSEnable", SqlDbType.Bit).Value = isSMSEnable;
                    com.Parameters.Add("@BulkUpload", SqlDbType.Bit).Value = bulkUpload;
                    com.Parameters.Add("@Status", SqlDbType.VarChar, 50).Value = status;
                    com.Parameters.Add("@isperminete", SqlDbType.Bit).Value = isperminete;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);

                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getRequestID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getRequestID;
        }

        /// <summary>
        /// Insert Visit Details
        /// </summary>
        /// <param name="requestID">parameter requestID</param>
        /// <param name="date">parameter date</param>
        /// <param name="status">insert or update</param>
        /// <returns>returns a value</returns>
        public DataTable InsertVisitDetails(int requestID, string date, string status)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertVisitDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);
                    com.Parameters.Add("@Date", SqlDbType.VarChar, 100).Value = Convert.ToDateTime(date);
                    com.Parameters.Add("@Status", SqlDbType.VarChar, 100).Value = status;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Get Dates From VisitDetails
        /// </summary>
        /// <param name="requestID">request ID</param>
        /// <returns>Data Table</returns>
        public DataTable GetDatesFromVisitDetails(int requestID)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_GetDatesFromVisitDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Insert Equipment Details
        /// </summary>
        /// <param name="VisitID">Visit ID</param>
        /// <param name="Type">Ty pe</param>
        /// <param name="Make">Ma ke</param>
        /// <param name="Model">Mo del</param>
        /// <param name="Serial">Se rial</param>
        /// <returns>Data Table</returns>
        public DataTable InsertEquipmentDetails(int VisitID, string Type, string Make, string Model, string Serial)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertEquipmentDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitID", SqlDbType.Int).Value = Convert.ToInt32(VisitID);
                    com.Parameters.Add("@Type", SqlDbType.VarChar, 50).Value = Type;
                    com.Parameters.Add("@Make", SqlDbType.VarChar, 50).Value = Make;
                    com.Parameters.Add("@Model", SqlDbType.VarChar, 50).Value = Model;
                    com.Parameters.Add("@Serial", SqlDbType.VarChar, 50).Value = Serial;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Insert Email For Bulk User
        /// </summary>
        /// <param name="VisitorID">Visitor ID</param>
        /// <param name="EmailID">Email ID</param>
        /// <returns>Data Table</returns>
        public DataTable InsertEmailForBulkUser(int VisitorID, string EmailID)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertEmailForBulkUser", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = Convert.ToInt32(VisitorID);
                    com.Parameters.Add("@EmailID", SqlDbType.VarChar, 50).Value = EmailID;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Update cart flag
        /// </summary>
        /// <param name="CartID">Cart ID </param>
        /// <param name="AssociateID">Associate ID</param>
        /// <returns>Data Table</returns>
        public DataTable Updatecartflag(int CartID, string AssociateID)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_Updatecartflag", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@CartID", SqlDbType.Int).Value = Convert.ToInt32(CartID);
                    com.Parameters.Add("@AssociateID", SqlDbType.Int).Value = Convert.ToInt32(AssociateID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Update last RequestID
        /// </summary>
        /// <param name="requestID">request ID</param>
        /// <returns>Data Table</returns>
        public DataTable UpdatelastRequestID(int requestID)
        {
            DataTable getVisitID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_UpdatelastRequestID", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getVisitID;
        }

        /// <summary>
        /// Advance Allowable days
        /// </summary>
        /// <param name="visitortype">visitor type</param>
        /// <returns>returns a value</returns>
        public DataTable AdvanceAllowabledays(string visitortype)
        {
            DataTable getAdvanceAllowabledays = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("AdvanceAllowabledays", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@visitortype", SqlDbType.VarChar, 100).Value = visitortype;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getAdvanceAllowabledays.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getAdvanceAllowabledays;
        }

        /// <summary>
        /// Insert Link Request
        /// </summary>
        /// <param name="hostId">parameter hostId</param>
        /// <param name="requestId">parameter requestId</param>
        /// <param name="emailId">parameter emailId</param>
        /// <returns>returns a value</returns>
        public DataTable InsertLinkRequest(string hostId, int requestId, string emailId)
        {
            DataTable getLinkID = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertLinkRequest", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 100).Value = hostId;
                    com.Parameters.Add("@RequestID", SqlDbType.VarChar, 100).Value = requestId;
                    com.Parameters.Add("@EmailID", SqlDbType.VarChar, 100).Value = emailId;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getLinkID.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getLinkID;
        }

        /// <summary>
        /// Gets unique ID
        /// </summary>
        /// <param name="dctempid">parameter temp ID</param>
        /// <returns>returns a value</returns>
        public string DC_uniqueID(string dctempid)
        {
            int tempUniqueID = 0;
            string sqlGetEmployeeInfoproc = "DC_Status_Insert";
            try
            {
                string conn = string.Empty;
                conn =
                    ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                SqlDatabase sqlConn = new SqlDatabase(conn);
                DbCommand dbemployeeInfoComm =
                    sqlConn.GetStoredProcCommand(sqlGetEmployeeInfoproc);
                dbemployeeInfoComm.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(
                    dbemployeeInfoComm,
                    "Dctempid",
                    SqlDbType.VarChar,
                    dctempid);
                sqlConn.AddOutParameter(
                    dbemployeeInfoComm,
                    "DCTempuniqueid",
                    SqlDbType.Int,
                    tempUniqueID);
                sqlConn.ExecuteNonQuery(dbemployeeInfoComm);
                tempUniqueID =
                    Convert.ToInt32(sqlConn.GetParameterValue(dbemployeeInfoComm, "DCTempuniqueid"));
                return tempUniqueID.ToString();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get link
        /// </summary>
        /// <param name="dc_visitorid">parameter visitor</param>
        /// <returns>returns a value</returns>
        public string GetUID_DClink(string dc_visitorid)
        {
            int tempUniqueID = 0;
            string sqlGetEmployeeInfoproc = "GetUID_DClink";
            try
            {
                string conn = string.Empty;
                conn =
                    ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                SqlDatabase sqlConn = new SqlDatabase(conn);
                DbCommand dbemployeeInfoComm =
                    sqlConn.GetStoredProcCommand(sqlGetEmployeeInfoproc);
                dbemployeeInfoComm.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(dbemployeeInfoComm, "visitorid", SqlDbType.VarChar, dc_visitorid);
                sqlConn.AddOutParameter(dbemployeeInfoComm, "returnuniqueid", SqlDbType.Int, tempUniqueID);
                sqlConn.ExecuteNonQuery(dbemployeeInfoComm);
                tempUniqueID =
                    Convert.ToInt32(sqlConn.GetParameterValue(dbemployeeInfoComm, "returnuniqueid"));
                return tempUniqueID.ToString();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Insert Equipment Details
        /// </summary>
        /// <param name="visitID">parameter visitID</param>
        /// <param name="masterDataID">parameter masterDataID</param>
        /// <param name="make">parameter make</param>
        /// <param name="model">parameter model</param>
        /// <param name="serial">parameter serial</param>
        /// <param name="others">parameter others</param>
        /// <returns>returns a value</returns>
        public bool InsertEquipmentsDetails(int visitID, int masterDataID, string make, string model, string serial, string others)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertEquipmentsDetailsRevamp", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisiterID", SqlDbType.Int).Value = Convert.ToInt32(visitID);
                    com.Parameters.Add("@MasterDataID", SqlDbType.Int).Value = Convert.ToInt32(masterDataID);
                    com.Parameters.Add("@Make", SqlDbType.VarChar, 50).Value = make;
                    com.Parameters.Add("@Model", SqlDbType.VarChar, 50).Value = model;
                    com.Parameters.Add("@Serial", SqlDbType.VarChar, 50).Value = serial;
                    com.Parameters.Add("@others", SqlDbType.VarChar, 50).Value = others;
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Update equipment
        /// </summary>
        /// <param name="visitorID">Visit ID</param>
        /// <param name="masterDataID" >master Data ID</param>
        /// <param name="make">value make</param>
        /// <param name="model">value model</param>
        /// <param name="serial"> value serial</param>
        /// <param name="others">value others</param>
        /// <param name="slno">serial number</param>
        /// <returns>returns a value</returns>
        public bool UpdateEquiments(string visitorID, int masterDataID, string make, string model, string serial, string others, int slno)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("UpdateVisitorEquimentsMaster", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@visitorID", SqlDbType.VarChar).Value = visitorID;
                    com.Parameters.Add("@MasterDataID", SqlDbType.Int).Value = Convert.ToInt32(masterDataID);
                    com.Parameters.Add("@Make", SqlDbType.VarChar, 50).Value = make;
                    com.Parameters.Add("@Model", SqlDbType.VarChar, 50).Value = model;
                    com.Parameters.Add("@Serial", SqlDbType.VarChar, 50).Value = serial;
                    com.Parameters.Add("@Others", SqlDbType.VarChar, 50).Value = others;
                    com.Parameters.Add("@equipmentslno", SqlDbType.Int).Value = slno;
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// update visitor cart flag
        /// </summary>
        /// <param name="hostID">parameter hostID</param>
        /// <param name="visitorID">parameter visitorID</param>
        /// <returns>returns a value</returns>
        public bool Updatevisitorcartflag(string hostID, string visitorID)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("updatevisitorcartflag_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@VisitorID", SqlDbType.VarChar, 50).Value = visitorID;
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Insert Visitor Emergency Contact
        /// </summary>
        /// <param name="requestID">parameter requestID</param>
        /// <param name="fromDate">parameter fromDate</param>
        /// <param name="toDate">parameter toDate</param>
        /// <returns>returns a value</returns>
        public bool InsertVisitorEmergencyContact(int requestID, string fromDate, string toDate)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorEmergencyContact_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@RequestID", SqlDbType.Int).Value = Convert.ToInt32(requestID);
                    com.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = Convert.ToDateTime(fromDate);
                    com.Parameters.Add("@ToDate", SqlDbType.DateTime).Value = Convert.ToDateTime(toDate);
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Insert Visitor Proof
        /// </summary>
        /// <param name="visitorID">parameter RequestID</param>
        /// <param name="sanFilecontentId">parameter FromDate</param>
        /// <returns>returns a value</returns>
        public bool InsertVisitorProof(int visitorID, string sanFilecontentId)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("InsertVisitorProofRevamp", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = Convert.ToInt32(visitorID);
                    com.Parameters.Add("@filecontentid", SqlDbType.VarChar).Value = Convert.ToString(sanFilecontentId);
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Update Visitor Proof
        /// </summary>
        /// <param name="visitorID">parameter RequestID</param>
        /// <param name="sanFilecontentId">parameter FromDate</param>
        /// <returns>returns a value</returns>
        public bool UpdateVisitorProof(int visitorID, string sanFilecontentId)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("UpdateVisitorProofRevamp", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.Int).Value = Convert.ToInt32(visitorID);
                    com.Parameters.Add("@filecontentid", SqlDbType.VarChar).Value = Convert.ToString(sanFilecontentId);
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Get Track details
        /// </summary>
        /// <param name="strSearch">Se arch</param>
        /// <param name="strFromDate">From Date</param>
        /// <param name="strToDate">To Date</param>
        /// <returns>Data table</returns>
        public DataSet TrackDetails(string strSearch, string strFromDate, string strToDate)
        {
            SqlParameter paramSearch;
            SqlParameter paramFromDate;
            SqlParameter paramToDate;
            SqlParameter paramHost;
            DataSet getTrackDetails = new DataSet();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("SearchVisitors", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    paramSearch = new SqlParameter("@Search", SqlDbType.VarChar, 50);
                    paramSearch.Value = strSearch;
                    if (string.IsNullOrEmpty(strToDate))
                    {
                        paramToDate = new SqlParameter("@ToDate", SqlDbType.Date, 50);
                        paramToDate.Value = DateTime.MaxValue;
                        com.Parameters.Add(paramToDate);
                    }
                    else
                    {
                        paramToDate = new SqlParameter("@ToDate", SqlDbType.Date, 50);
                        paramToDate.Value = Convert.ToDateTime(strToDate);
                        com.Parameters.Add(paramToDate);
                    }

                    if (string.IsNullOrEmpty(strFromDate))
                    {
                        paramFromDate = new SqlParameter("@FromDate", SqlDbType.Date, 50);
                        paramFromDate.Value = DateTime.MinValue;
                        com.Parameters.Add(paramFromDate);
                    }
                    else
                    {
                        paramFromDate = new SqlParameter("@FromDate", SqlDbType.Date, 50);
                        paramFromDate.Value = Convert.ToDateTime(strFromDate);
                        com.Parameters.Add(paramFromDate);
                    }

                    paramHost = new SqlParameter("@HostID", SqlDbType.VarChar, 50);
                    paramHost.Value = 257126;
                    com.Parameters.Add(paramHost);
                    con.OpenWithMSI();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    adapter.SelectCommand = com;
                    adapter.Fill(getTrackDetails);
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getTrackDetails;
        }

        /// <summary>
        /// Get All details for New request
        /// </summary>
        /// <param name="hostID">host ID</param>
        /// <param name="city">value City</param>
        /// <param name="countryId">country Id</param>
        /// <param name="type"> value Type</param>
        /// <returns>Data set</returns>
        public DataSet GetAllDetailsforNewRequest(string hostID, string city, string countryId, string type)
        {
            DataSet getTrackDetails = new DataSet();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetAllDetailsforNewRequest_New", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@hostID", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(hostID) ? hostID : Convert.DBNull;
                    com.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(city) ? city : Convert.DBNull;
                    com.Parameters.Add("@countryId", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(countryId) ? countryId : Convert.DBNull;
                    com.Parameters.Add("@Type", SqlDbType.VarChar, 50).Value = !string.IsNullOrEmpty(type) ? type : Convert.DBNull;
                    con.OpenWithMSI();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    adapter.SelectCommand = com;
                    adapter.Fill(getTrackDetails);
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getTrackDetails;
        }

        /// <summary>
        /// Get All details for New request
        /// </summary>
        /// <param name="visitorId">host ID</param>
        /// <returns>Data set</returns>
        public DataSet FetchVisitorDetails(string visitorId)
        {
            DataSet getTrackDetails = new DataSet();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("Getdetailsbasedonvisitorid", con))
                {
                    con.OpenWithMSI();
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@visitorid", SqlDbType.VarChar, 50).Value = visitorId;
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    adapter.SelectCommand = com;
                    adapter.Fill(getTrackDetails);
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getTrackDetails;
        }

        /// <summary>
        /// Update Visitor Details
        /// </summary>
        /// <param name="Name">Na me</param>
        /// <param name="company">com pany</param>
        /// <param name="mobileno">mobile no</param>
        /// <param name="visitorid">visitor id</param>
        /// <param name="hostID">host ID</param>
        /// <param name="visitorType">visitor Type</param>
        /// <param name="others">others type</param>
        /// <returns>Bo ol</returns>
        public bool UpdateVisitorDetails(string Name, string company, string mobileno, string visitorid, string hostID, string visitorType, string others)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("UpdateVisitorMasterDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@Name", SqlDbType.VarChar, 50).Value = Name;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 20).Value = mobileno;
                    com.Parameters.Add("@visitorID", SqlDbType.VarChar, 50).Value = visitorid;
                    com.Parameters.Add("@VisitorType", SqlDbType.VarChar, 50).Value = visitorType;
                    com.Parameters.Add("@login", SqlDbType.VarChar, 50).Value = hostID;
                    com.Parameters.Add("@Others", SqlDbType.VarChar, 50).Value = others;
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Update Visito rOld Details
        /// </summary>
        /// <param name="Name">Na me</param>
        /// <param name="company">com pany</param>
        /// <param name="mobileno">mobile no</param>
        /// <param name="visitorid">visitor id</param>
        /// <param name="hostID">host ID</param>
        /// <returns>Data Table</returns>
        public DataTable UpdateVisitorOldDetails(string Name, string company, string mobileno, string visitorid, string hostID)
        {
            DataTable getMasterDetails = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("UpdateVisitorDetails", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@FirstName", SqlDbType.VarChar, 50).Value = Name;
                    com.Parameters.Add("@Company", SqlDbType.VarChar, 50).Value = company;
                    com.Parameters.Add("@MobileNo", SqlDbType.VarChar, 20).Value = mobileno;
                    com.Parameters.Add("@visitorID", SqlDbType.VarChar, 50).Value = visitorid;
                    com.Parameters.Add("@login", SqlDbType.VarChar, 50).Value = hostID;
                    con.OpenWithMSI();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    adapter.SelectCommand = com;
                    adapter.Fill(getMasterDetails);
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getMasterDetails;
        }

        /// <summary>
        /// Insert Cart Equipment
        /// </summary>
        /// <param name="EquipmentType">Equipment Type</param>
        /// <param name="EquipmentMake">Equipment Make</param>
        /// <param name="EquipmentSerial">Equipment Serial</param>
        /// <param name="EquipmentModel">Equipment Model</param>
        /// <param name="Createdby">Created by</param>
        /// <param name="UniqueID">Unique ID</param>
        /// <returns>Data Table</returns>
        public DataTable InsertCartEquipment(string EquipmentType, string EquipmentMake, string EquipmentSerial, string EquipmentModel, string Createdby, string UniqueID)
        {
            DataTable getMasterDetails = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("usp_InsertCartEquipment", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@EquipmentType", SqlDbType.VarChar, 50).Value = EquipmentType;
                    com.Parameters.Add("@EquipmentMake", SqlDbType.VarChar, 50).Value = EquipmentMake;
                    com.Parameters.Add("@EquipmentSerial", SqlDbType.VarChar, 20).Value = EquipmentSerial;
                    com.Parameters.Add("@EquipmentModel", SqlDbType.VarChar, 50).Value = EquipmentModel;
                    com.Parameters.Add("@Createdby", SqlDbType.VarChar, 50).Value = Createdby;
                    com.Parameters.Add("@CartID", SqlDbType.VarChar, 50).Value = UniqueID;
                    con.OpenWithMSI();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    adapter.SelectCommand = com;
                    adapter.Fill(getMasterDetails);
                }
            }
            catch (SqlException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }

            return getMasterDetails;
        }

        /// <summary>
        /// Update Status table
        /// </summary>
        /// <param name="dcuniqueID">parameter unique ID</param>
        /// <param name="requestID">parameter requestID</param>
        /// <param name="dcid">parameter id</param>
        public void UpdateDC_Statustable(string dcuniqueID, string requestID, int dcid)
        {
            string sqlGetEmployeeInfoproc = "submitDC_Statustable";
            try
            {
                string conn = string.Empty;
                conn =
                    ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                SqlDatabase sqlConn = new SqlDatabase(conn);
                DbCommand dbemployeeInfoComm =
                    sqlConn.GetStoredProcCommand(sqlGetEmployeeInfoproc);
                dbemployeeInfoComm.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(
                    dbemployeeInfoComm,
                    "DCTempuniqueid",
                    SqlDbType.Int,
                    Convert.ToInt32(dcuniqueID));
                sqlConn.AddInParameter(
                    dbemployeeInfoComm,
                    "RequestID",
                    SqlDbType.Int,
                    Convert.ToInt32(requestID));
                sqlConn.AddInParameter(
                    dbemployeeInfoComm,
                    "dcid",
                    SqlDbType.Int,
                    dcid);
                sqlConn.ExecuteNonQuery(dbemployeeInfoComm);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get Facility Address
        /// </summary>
        /// <param name="locationId">Location Id</param>
        /// <param name="city">City Name</param>
        /// <returns>Facility Address</returns>
        public string GetFacilityAddressByid(string locationId, string city)
        {
            string sqlGetCountry = "GetFacilityAddressByid";
            string strFacilityAddress = string.Empty;
            SqlConnection sqlConn_gfabi =
                new SqlConnection(
                    System.Configuration.ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString());
            sqlConn_gfabi.OpenWithMSI();
            try
            {
                SqlCommand cmdCity = new SqlCommand(sqlGetCountry, sqlConn_gfabi);
                cmdCity.CommandType = CommandType.StoredProcedure;
                cmdCity.Parameters.Add("@LocationId", SqlDbType.VarChar, 50).Value = locationId;
                cmdCity.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = city;
                strFacilityAddress = Convert.ToString(cmdCity.ExecuteScalar());
                return strFacilityAddress;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn_gfabi.Close();
            }
        }

        /// <summary>
        /// Get Visitors Image By Id
        /// </summary>
        /// <param name="visitorId">parameter visitorId</param>
        /// <returns>returns a value</returns>
        public DataTable GetVisitorsImageById(int visitorId)
        {
            DataTable getVisitorsImage = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetVisitorsImageById_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorId", SqlDbType.Int).Value = visitorId;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorsImage.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVisitorsImage;
        }

        /// <summary>
        /// Get Visitors Image By VisitorId
        /// </summary>
        /// <param name="visitorId">visitor ID</param>
        /// <param name="flag"> value flag</param>
        /// <returns>returns a value</returns>
        public DataTable GetVisitorsImageByVisitorId(int visitorId, string flag)
        {
            DataTable getVisitorsImage = new DataTable();
            string sp = "GetVisitorsImageById_new";
            if (flag == "flag")
            {
                sp = "GetVisitorsImageById_Revamp";
            }

            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand(sp, con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorId", SqlDbType.Int).Value = visitorId;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getVisitorsImage.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getVisitorsImage;
        }

        /// <summary>
        /// Get Location Image
        /// </summary>
        /// <param name="locationName">parameter location</param>
        /// <returns>returns a value</returns>
        public DataTable GetLocationImage(string locationName)
        {
            DataTable getLocationImage = new DataTable();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetLocationImage_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@LocationName", SqlDbType.VarChar, 500).Value = locationName;
                    con.OpenWithMSI();
                    using (SqlDataReader dr = com.ExecuteReader())
                    {
                        getLocationImage.Load(dr);
                        dr.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return getLocationImage;
        }

        /// <summary>
        /// Delete All visitor details in error
        /// </summary>
        /// <param name="visitorID">parameter visitorID</param>
        /// <param name="requestID">parameter requestID</param>
        /// <param name="visitID">parameter visitID</param>
        /// <param name="visitEquipmentID">parameter visitEquipmentID</param>
        /// <returns>returns a value</returns>
        public bool DeleteAllvisitordetailsinerror(string visitorID, string requestID, string visitID, string visitEquipmentID)
        {
            int rowCount = 0;
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("DeleteAllvisitordetailsinerror_new", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@VisitorID", SqlDbType.VarChar, 8000).Value = string.IsNullOrEmpty(visitorID) ? visitorID : Convert.DBNull;
                    com.Parameters.Add("@RequestID", SqlDbType.VarChar, 8000).Value = string.IsNullOrEmpty(requestID) ? requestID : Convert.DBNull;
                    com.Parameters.Add("@visitID", SqlDbType.VarChar, 8000).Value = string.IsNullOrEmpty(visitID) ? visitID : Convert.DBNull;
                    com.Parameters.Add("@visitEquipmentID", SqlDbType.VarChar, 8000).Value = string.IsNullOrEmpty(visitEquipmentID) ? visitEquipmentID : Convert.DBNull;
                    con.OpenWithMSI();
                    rowCount = com.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            if (rowCount == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// The Get Multiple Visitor Details method
        /// </summary>
        /// <param name="visitorIDs">The visitor IDs parameter</param>
        /// <param name="groupID">group ID</param>
        /// <returns>returns a value</returns>
        public IList<MultipleVisitor> GetMultipleVisiorDetails(List<int> visitorIDs, string groupID)
        {
            IList<MultipleVisitor> visitorDetails = new List<MultipleVisitor>();
            DataSet AllVisitorDetails = new DataSet();
            DataTable visitorData = new DataTable();
            DataTable datacenterData = new DataTable();
            DataTable argentinaDetails = new DataTable();

            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetVistiorscartDetails_New1", con))
                {
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.Add("@FillVisitorIDs", SqlDbType.Structured).Value = this.FillVisitorIDs(visitorIDs);
                    com.Parameters.Add("@HostID", SqlDbType.NVarChar, 11).Value = Common.UserId();
                    com.Parameters.Add("@GroupId", SqlDbType.Int).Value = string.IsNullOrEmpty(groupID) ? 0 : Convert.ToInt32(groupID);
                    con.OpenWithMSI();
                    SqlDataAdapter da;
                    da = new SqlDataAdapter(com);
                    da.Fill(AllVisitorDetails);

                    visitorData = AllVisitorDetails.Tables[0];
                    datacenterData = AllVisitorDetails.Tables[1];
                    argentinaDetails = AllVisitorDetails.Tables[2];


                    MultipleVisitor detail = new MultipleVisitor();
                    EquipmentDetails equip = new EquipmentDetails();
                    int prevVisitorId = -1;
                    int visitorId = 0;
                    for (int i = 0; i < visitorData.Rows.Count; i++)
                    {
                        visitorId = Convert.ToInt32(visitorData.Rows[i]["VisitorID"]);

                        if (visitorId == prevVisitorId)
                        {
                            equip = new EquipmentDetails();
                            equip.EquipmentType = visitorData.Rows[i]["MasterDataDescription"].ToString();
                            equip.Purpose = visitorData.Rows[i]["Purpose"].ToString();
                            equip.Make = visitorData.Rows[i]["Make"].ToString();
                            equip.Model = visitorData.Rows[i]["Model"].ToString();
                            equip.Serial = visitorData.Rows[i]["SerialNo"].ToString();
                            equip.Others = visitorData.Rows[i]["Others"].ToString();
                            visitorDetails[visitorDetails.Count() - 1].Equipments.Add(equip);
                        }
                        else
                        {
                            detail = new MultipleVisitor();
                            detail.VisitorID = visitorId;
                            detail.Name = visitorData.Rows[i]["FirstName"].ToString();
                            detail.Organization = visitorData.Rows[i]["Company"].ToString();
                            detail.Purpose = visitorData.Rows[i]["Purpose"].ToString();
                            detail.Gender = visitorData.Rows[i]["Gender"].ToString();
                            //detail.ArgIdentityType = visitorData.Rows[i]["IdentityType"].ToString();
                            // detail.ArgIdentityValue = visitorData.Rows[i]["IdentityNumber"].ToString();
                            //detail.WantDCAccess = string.IsNullOrEmpty(dr["DCAccess"].ToString()) ? "No" : dr["DCAccess"].ToString();
                            //detail.DCUniqueId = dr["DCUniqueID"].ToString();

                            if (!string.IsNullOrEmpty(visitorData.Rows[i]["MasterDataDescription"].ToString()))
                            {
                                equip = new EquipmentDetails();
                                equip.EquipmentType = visitorData.Rows[i]["MasterDataDescription"].ToString();
                                equip.Purpose = visitorData.Rows[i]["Purpose"].ToString();
                                equip.Make = visitorData.Rows[i]["Make"].ToString();
                                equip.Model = visitorData.Rows[i]["Model"].ToString();
                                equip.Serial = visitorData.Rows[i]["SerialNo"].ToString();
                                equip.Others = visitorData.Rows[i]["Others"].ToString();
                                detail.Equipments = new List<EquipmentDetails>();
                                detail.Equipments.Add(equip);
                            }

                            visitorDetails.Add(detail);
                        }

                        prevVisitorId = visitorId;

                    }

                    if (datacenterData.Rows.Count != 0)
                    {
                        foreach (var data in visitorDetails)
                        {
                            List<MultipleDataCentre> dcDetails = new List<MultipleDataCentre>();
                            for (int i = 0; i < datacenterData.Rows.Count; i++)
                            {
                                if (data.VisitorID == Convert.ToInt32(datacenterData.Rows[i]["MasterVisitorID"]))
                                {
                                    MultipleDataCentre dcData = new MultipleDataCentre();
                                    dcData.WantDCAccess = datacenterData.Rows[i]["DCAccess"].ToString();
                                    dcData.HasDCAccess = true;
                                    dcData.DCUniqueID = datacenterData.Rows[i]["DCUniqueID"].ToString();
                                    dcData.LocationID = Convert.ToInt32(datacenterData.Rows[i]["LocationId"]);
                                    dcDetails.Add(dcData);
                                }
                            }
                            data.MultipleDCDetails = dcDetails;
                        }
                    }


                    if (argentinaDetails != null)
                    {
                        for (int i = 0; i < argentinaDetails.Rows.Count; i++)
                        {
                            foreach (var visitor in visitorDetails)
                            {
                                if (visitor.VisitorID == Convert.ToInt32(argentinaDetails.Rows[i]["MasterVisitorID"]))
                                {
                                    visitor.IsArgentina = true;
                                    visitor.ArgIdentityType = argentinaDetails.Rows[i]["IdentityType"].ToString();
                                    visitor.ArgIdentityValue = argentinaDetails.Rows[i]["IdentityNumber"].ToString();
                                }
                            }
                        }

                    }


                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }

            return visitorDetails;
        }

        /// <summary>
        /// Get Visit Request Details
        /// </summary>
        /// <param name="visitDetailsId">visit Details Id</param>
        /// <returns>Request Details</returns>
        public PropertiesDC GetVisitRequestDetails(int visitDetailsId)
        {
            PropertiesDC propertiesDc = new PropertiesDC();
            try
            {
                SqlConnection connection = new SqlConnection(vmsConn);
                connection.SetAccessToken();
                using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                    new VMSDataObjectsDataContext(connection))
                {
                    VMSBusinessEntity.VisitDetail visitdetails =
                        (from visitdetail in vmsDatabase.VisitDetails
                         where visitdetail.VisitDetailsID == visitDetailsId
                         select visitdetail).FirstOrDefault<VisitDetail>();

                    VMSBusinessEntity.VisitorRequest visitorrequest =
                        (from visitrequest in vmsDatabase.VisitorRequests
                         where visitrequest.RequestID == visitdetails.RequestID
                         select visitrequest).FirstOrDefault<VisitorRequest>();

                    VMSBusinessEntity.VisitorEmergencyContact visitoremergencyobj =
                        (from visitoremergency in
                             vmsDatabase.VisitorEmergencyContacts
                         where visitoremergency.RequestID ==
                             visitorrequest.RequestID
                         select visitoremergency).FirstOrDefault<VisitorEmergencyContact>();

                    List<VisitorEquipment> equipmentDetails =
                        (from visitorequipment in vmsDatabase.VisitorEquipments
                         where visitorequipment.VisitDetailsID == visitDetailsId
                         select visitorequipment).ToList<VisitorEquipment>();

                    VMSBusinessEntity.VisitorMaster visitormasterobj =
                        (from visitormaster in vmsDatabase.VisitorMasters
                         where visitormaster.VisitorID == visitorrequest.VisitorID
                         select visitormaster).FirstOrDefault<VisitorMaster>();
                    VMSBusinessEntity.VisitorProof visitorproofdetails =
                        (from visitorproof in vmsDatabase.VisitorProofs
                         where visitorproof.VisitorID == visitormasterobj.VisitorID
                         select visitorproof).FirstOrDefault<VisitorProof>();

                    VMSBusinessEntity.IdentityDetail identityDetails =
                        (from identity in vmsDatabase.IdentityDetails
                         where identity.VisitorID == visitormasterobj.VisitorID
                         select identity).FirstOrDefault<IdentityDetail>();

                    propertiesDc.VisitorMasterProperty = visitormasterobj;
                    propertiesDc.VisitorProofProperty = visitorproofdetails;
                    propertiesDc.VisitorRequestProperty = visitorrequest;
                    propertiesDc.VisitorEquipmentProperty = equipmentDetails;
                    propertiesDc.VisitorEmergencyContactProperty = visitoremergencyobj;
                    propertiesDc.IdentityDetails = identityDetails;
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }

            return propertiesDc;
        }
        #endregion

        /// <summary>
        /// Get User Role
        /// </summary>
        /// <param name="userId">User Id</param>
        /// <returns>List of Users</returns>
        public IList<string> GetUserRole(string userId)
        {
            IList<string> userRole = new List<string>();
            try
            {
                SqlConnection connection = new SqlConnection(vmsConn);
                connection.SetAccessToken();
                using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                    new VMSDataObjectsDataContext(connection))
                {
                    var role = vmsDatabase.GetUserRole(userId);
                    foreach (var data in role)
                    {
                        userRole.Add(data.UserRole);
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }

            return userRole;
        }

        /// <summary>
        /// Get Location Details By Id
        /// </summary>
        /// <param name="requestId">request Id</param>
        /// <returns>Location Details</returns>
        public DataTable GetLocationDetailsById(string requestId)
        {
            DataSet set = new DataSet();
            try
            {
                string strConnectionString_gldbi = ConfigurationManager.ConnectionStrings["VMSConnectionString"]
                                                   .ToString();
                SqlConnection sqlConn_gldbi = new SqlConnection(strConnectionString_gldbi);
                sqlConn_gldbi.OpenWithMSI();
                SqlCommand sqlComm_gldbi = new SqlCommand("GetLocationDetailsById", sqlConn_gldbi);
                sqlComm_gldbi.CommandType = CommandType.StoredProcedure;
                sqlComm_gldbi.Parameters.Add("@RequestID", SqlDbType.VarChar, 10).Value = requestId;
                SqlDataAdapter da;
                da = new SqlDataAdapter(sqlComm_gldbi);
                da.Fill(set);
                DataTable dt = new DataTable();
                dt = set.Tables[0];
                return dt;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get Location Details By Id
        /// </summary>
        /// <param name="locationId">location Id</param>
        /// <returns>Location Details</returns>
        public DataTable GetLocationDetailsByLocationID(string locationId)
        {
            DataSet set = new DataSet();
            try
            {
                string strConnectionString_gldbi = ConfigurationManager.ConnectionStrings["VMSConnectionString"]
                                                   .ToString();
                SqlConnection sqlConn_gldbi = new SqlConnection(strConnectionString_gldbi);
                sqlConn_gldbi.OpenWithMSI();
                SqlCommand sqlComm_gldbi = new SqlCommand("GetLocationDetailsByLocationID", sqlConn_gldbi);
                sqlComm_gldbi.CommandType = CommandType.StoredProcedure;
                sqlComm_gldbi.Parameters.Add("@LocationID", SqlDbType.VarChar, 10).Value = locationId;
                SqlDataAdapter da;
                da = new SqlDataAdapter(sqlComm_gldbi);
                da.Fill(set);
                DataTable dt = new DataTable();
                dt = set.Tables[0];
                return dt;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get City
        /// </summary>
        /// <param name="countryId">Country Id</param>
        /// <returns>City Details</returns>
        public DataTable GetCity(string countryId)
        {
            DataSet set = new DataSet();
            try
            {
                string strConnectionString = ConfigurationManager.ConnectionStrings["VMSConnectionString"]
                                             .ToString();
                SqlConnection sqlConn_gc = new SqlConnection(strConnectionString);
                sqlConn_gc.OpenWithMSI();
                SqlCommand sqlComm_gc = new SqlCommand("GetCity", sqlConn_gc);
                sqlComm_gc.CommandType = CommandType.StoredProcedure;
                sqlComm_gc.Parameters.Add("@countryId", SqlDbType.VarChar, 10).Value = countryId;
                SqlDataAdapter da;
                da = new SqlDataAdapter(sqlComm_gc);
                da.Fill(set);
                DataTable dt = new DataTable();
                dt = set.Tables[0];
                return dt;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get Location
        /// </summary>
        /// <param name="city">city name</param>
        /// <returns>Location Details</returns>
        public DataTable GetLocation(string city)
        {
            DataSet set = new DataSet();
            try
            {
                string strConnectionString = ConfigurationManager.ConnectionStrings["VMSConnectionString"]
                                             .ToString();
                SqlConnection sqlConn_gl = new SqlConnection(strConnectionString);
                sqlConn_gl.OpenWithMSI();
                SqlCommand sqlComm_gl = new SqlCommand("GetLocation", sqlConn_gl);
                sqlComm_gl.CommandType = CommandType.StoredProcedure;
                sqlComm_gl.Parameters.Add("@city", SqlDbType.VarChar, 100).Value = city;
                SqlDataAdapter da;
                da = new SqlDataAdapter(sqlComm_gl);
                da.Fill(set);
                DataTable dt = new DataTable();
                dt = set.Tables[0];
                return dt;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get All Location
        /// </summary>
        /// <returns>Location Details</returns>
        public MultipleLocation GetAllLocationData()
        {
            MultipleLocation AllLocationData = new MultipleLocation();
            List<Countries> countries = new List<Countries>();
            //List<Cities> cities= new List<Cities>();
            //List<Locations> locations = new List<Locations>();
            SqlDataAdapter adapter = new SqlDataAdapter();
            DataSet locationDetails = new DataSet();
            if (this.connectionStringSettings != null)
            {
                this.strConnectionString = this.connectionStringSettings.ConnectionString;
            }

            SqlConnection con = new SqlConnection(this.strConnectionString);
            try
            {
                using (SqlCommand com = new SqlCommand("GetAllLocationData", con))
                {
                    com.CommandType = CommandType.StoredProcedure;

                    con.OpenWithMSI();

                    adapter.SelectCommand = com;
                    adapter.Fill(locationDetails);

                    for (int i = 0; i < locationDetails.Tables[0].Rows.Count; i++)
                    {
                        Countries data = new Countries();
                        data.Country = locationDetails.Tables[0].Rows[i]["Code"].ToString().Trim();
                        //data.CountryCode = Convert.ToInt32(locationDetails.Tables[0].Rows[i]["Code"].ToString().Trim());
                        data.CountryID = Convert.ToInt32(locationDetails.Tables[0].Rows[i]["Id"].ToString().Trim());
                        data.Countrydesc = locationDetails.Tables[0].Rows[i]["Codedesc"].ToString().Trim();
                        //switch (data.Country)
                        //{
                        //    case "India": data.TimeZone = "IST";
                        //        break;
                        //    case "China": data.TimeZone = "CST";
                        //        break;
                        //    case "Argentina": data.TimeZone = "ART";
                        //        break;
                        //    case "Hungary": data.TimeZone = "CET";
                        //        break;
                        //    case "Philippines": data.TimeZone = "PST";
                        //        break;
                        //    default: data.TimeZone = string.Empty;
                        //        break;
                        //}
                        countries.Add(data);
                    }

                    //for (int i = 0; i < locationDetails.Tables[1].Rows.Count; i++)
                    //{
                    //    Cities data = new Cities();
                    //    data.City = locationDetails.Tables[1].Rows[i]["LocationCity"].ToString().Trim();
                    //    data.CityID = i;
                    //    data.CountryID = Convert.ToInt32(locationDetails.Tables[1].Rows[i]["CountryId"].ToString().Trim());
                    //    data.Country = locationDetails.Tables[1].Rows[i]["Country"].ToString().Trim();
                    //    cities.Add(data);
                    //}

                    //for (int i = 0; i < locationDetails.Tables[2].Rows.Count; i++)
                    //{
                    //    Locations data = new Locations();
                    //    data.City = locationDetails.Tables[2].Rows[i]["LocationCity"].ToString().Trim();
                    //    data.Location = locationDetails.Tables[2].Rows[i]["LocationName"].ToString().Trim();
                    //    data.LocationID = Convert.ToInt32(locationDetails.Tables[2].Rows[i]["LocationId"].ToString().Trim());
                    //    locations.Add(data);
                    //}
                }
                AllLocationData.AllCountries = countries;
                //AllLocationData.AllCities = cities;
                //AllLocationData.AllLocations = locations;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }
            return AllLocationData;
        }

        /// <summary>
        /// To Get Collection of Visitors Equipment
        /// </summary>
        /// <param name="requestId">request Id</param>
        /// <returns>Visitor Equipment</returns>
        public IList<VisitorManagement.Common.VisitorEquipmentdetails> GetVisitor_EquipmentList(int requestId)
        {
            SqlConnection connection = new SqlConnection(vmsConn);
            connection.SetAccessToken();
            ////try
            ////{
            using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                new VMSDataObjectsDataContext(connection))
            {
                IList<VisitorManagement.Common.VisitorEquipmentdetails> visitequipment =
                    (from visitrequest in vmsDatabase.VisitorRequests
                     join visitdetail in vmsDatabase.VisitDetails on
                     visitrequest.RequestID equals visitdetail.RequestID
                     join visitequipments in vmsDatabase.VisitorEquipments
                     on visitdetail.VisitDetailsID equals visitequipments.VisitDetailsID
                     join Masterdata in vmsDatabase.MasterDatas on
                     visitequipments.MasterDataID equals Masterdata.MasterDataID
                     where visitrequest.RequestID == requestId
                     group visitequipments by
                     new { visitequipments.MasterDataID, visitequipments.Make, visitequipments.Model, visitequipments.SerialNo, visitequipments.Others }
                         into grp
                     select new VisitorManagement.Common.VisitorEquipmentdetails
                     {
                         EquipmentType = Convert.ToInt32(grp.Key.MasterDataID).ToString(),
                         Make = grp.Key.Make,
                         ModelNo = grp.Key.Model,
                         SerialNo = grp.Key.SerialNo,
                         Others = grp.Key.Others
                     }).ToList();

                return visitequipment;
            }
            ////}
            ////catch (SqlException ex)
            ////{
            ////    throw ex;
            ////}
            ////catch (NullReferenceException ex)
            ////{
            ////    throw ex;
            ////}
            ////catch (ArgumentException ex)
            ////{
            ////    throw ex;
            ////}
        }

        /// <summary>
        /// Cancel Request
        /// </summary>
        /// <param name="requestId">Request Id</param>
        /// <returns>status of request</returns>
        public int? CancelRequest(int requestId)
        {
            int? success = 1;
            try
            {
                SqlConnection connection = new SqlConnection(vmsConn);
                connection.SetAccessToken();
                using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                    new VMSDataObjectsDataContext(connection))
                {
                    vmsDatabase.UpdateStatus(requestId, ref success);
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }

            return success;
        }

        /// <summary>
        /// Get Visit Details By RequestID
        /// </summary>
        /// <param name="requestId">Request Id</param>
        /// <returns>Visit Detail</returns>
        public IList<VisitDetail> GetVisitDetailsByRequestID(int requestId)
        {
            IList<VisitDetail> visitDetailObj = null;
            try
            {
                SqlConnection connection = new SqlConnection(vmsConn);
                connection.SetAccessToken();
                using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                    new VMSDataObjectsDataContext(connection))
                {
                    IList<VisitDetail> visitDetails = (from visitdetail in vmsDatabase.VisitDetails
                                                       where visitdetail.RequestID == requestId
                                                       select visitdetail).ToList<VisitDetail>();
                    visitDetailObj = visitDetails;
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }

            return visitDetailObj;
        }

        /// <summary>
        /// Edit Visitor Information
        /// </summary>
        /// <param name="visitorProof">visitor Proof</param>
        /// <param name="visitorMaster">visitor Master</param>
        /// <param name="visitorRequest">visitor Request</param>
        /// <param name="visitDetailObj">visit Detail</param>
        /// <param name="visitorEmergencyContactObj">visitor Emergency Contact</param>
        /// <param name="identityDetail">identity Detail</param>
        /// <returns>status of request</returns>
        public int EditVisitorInformation(
            VMSBusinessEntity.VisitorProof visitorProof,
            VMSBusinessEntity.VisitorMaster visitorMaster,
            VMSBusinessEntity.VisitorRequest visitorRequest,
            VMSBusinessEntity.VisitDetail[] visitDetailObj,
            VisitorEmergencyContact visitorEmergencyContactObj,
            IdentityDetail identityDetail)
        {
            int success = 1;
            if (this.UpdateRequestDetails(visitorRequest))
            {
                using (TransactionScope scope = new TransactionScope())
                {
                    try
                    {
                        SqlConnection connection = new SqlConnection(vmsConn);
                        connection.SetAccessToken();
                        using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                            //new VMSDataObjectsDataContext(DBConnection.Connectionstring()))
                            new VMSDataObjectsDataContext(connection))
                        {
                            vmsDatabase.Connection.Open();

                            if (!string.IsNullOrEmpty(visitorProof.FileContentId))
                            {
                                visitorProof.VisitorID = visitorMaster.VisitorID;
                                vmsDatabase.UpdateUserImgInDB(
                                    visitorMaster.VisitorID,
                                    visitorProof.Photo,
                                    visitorProof.FileContentId);
                                vmsDatabase.SubmitChanges();
                            }

                            vmsDatabase.ClearVisitDetails(visitorRequest.RequestID);
                            vmsDatabase.SubmitChanges();
                            if (visitDetailObj != null)
                            {
                                foreach (VMSBusinessEntity.VisitDetail visitDetail in visitDetailObj)
                                {
                                    if (visitDetail.Date >= DateTime.Now.Date)
                                    {
                                        visitDetail.RequestID = (int)visitorRequest.RequestID;
                                        vmsDatabase.VisitDetails.InsertOnSubmit(visitDetail);
                                        vmsDatabase.SubmitChanges();
                                    }
                                }
                            }

                            vmsDatabase.SubmitChanges();
                            visitorEmergencyContactObj.RequestID = visitorRequest.RequestID;

                            //// vmsDatabase.VisitorEmergencyContacts.Attach(visitorEmergencyContactObj);
                            //// vmsDatabase.Refresh(System.Data.Linq.RefreshMode.KeepCurrentValues, 
                            ////visitorEmergencyContactObj);
                            vmsDatabase.VisitorMasters.Attach(visitorMaster);
                            vmsDatabase.Refresh(System.Data.Linq.RefreshMode.KeepCurrentValues, visitorMaster);
                            vmsDatabase.SubmitChanges();

                            var identity = vmsDatabase.IdentityDetails.Where(
                                x => x.VisitorID.Equals(visitorMaster.VisitorID)).FirstOrDefault();
                            if (identity != null)
                            {
                                identity.IdentityType = identityDetail != null ? identityDetail.IdentityType
                                                        : string.Empty;
                                identity.IdentityNo = identityDetail != null ? identityDetail.IdentityNo
                                                      : string.Empty;
                                identity.VisitorID = visitorMaster.VisitorID;
                                vmsDatabase.SubmitChanges();
                            }
                            else
                            {
                                if (identityDetail != null)
                                {
                                    identityDetail.VisitorID = visitorMaster.VisitorID;
                                    vmsDatabase.IdentityDetails.InsertOnSubmit(identityDetail);
                                    vmsDatabase.SubmitChanges();
                                }
                            }

                            ////if (visitDetailObj != null)
                            ////{
                            ////    InsertEquipment(visitDetailObj, visitorEquipmentObj);
                            ////}
                            success = 0;
                            scope.Complete();
                        }

                        return success;
                    }
                    catch (SqlException ex)
                    {
                        throw ex;
                    }
                }
            }
            else
            {
                return success;
            }
        }

        /// <summary>
        /// Update Request Details
        /// </summary>
        /// <param name="visitorRequest">visitor Request</param>
        /// <returns>status of request</returns>
        public bool UpdateRequestDetails(VMSBusinessEntity.VisitorRequest visitorRequest)
        {
            SqlCommand cmd;
            SqlConnection con = null;
            try
            {
                string conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                con = new SqlConnection(conn);
                con.OpenWithMSI();
                cmd = new SqlCommand("updatevisitorrequesttable", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = visitorRequest.Country;
                //cmd.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = visitorRequest.City;
                cmd.Parameters.Add("@Location", SqlDbType.VarChar, 50).Value = visitorRequest.Facility;
                cmd.Parameters.Add("@Purpose", SqlDbType.VarChar, 50).Value = visitorRequest.Purpose;
                cmd.Parameters.Add("@fromdate", SqlDbType.Date, 50).Value = visitorRequest.FromDate;
                cmd.Parameters.Add("@todate", SqlDbType.Date, 50).Value = visitorRequest.ToDate;
                cmd.Parameters.Add("@fromtime", SqlDbType.Time, 50).Value = visitorRequest.FromTime;
                cmd.Parameters.Add("@totime", SqlDbType.Time, 50).Value = visitorRequest.ToTime;
                //cmd.Parameters.Add("@recurrence", SqlDbType.VarChar, 50).Value = visitorRequest.RecurrencePattern;
                //cmd.Parameters.Add("@occurence", SqlDbType.VarChar, 50).Value = visitorRequest.Occurence;
                //cmd.Parameters.Add("@comments", SqlDbType.VarChar, 50).Value = visitorRequest.Comments;
                //cmd.Parameters.Add("@LocationID", SqlDbType.VarChar, 50).Value = visitorRequest.LocationId;
                cmd.Parameters.Add("@offset", SqlDbType.VarChar, 50).Value = "-330";
                cmd.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = visitorRequest.HostID;
                //cmd.Parameters.Add("@ipAddress", SqlDbType.VarChar, 50).Value = visitorRequest.IPAddress;
                cmd.Parameters.Add("@isSMSEnable", SqlDbType.Bit, 50).Value = visitorRequest.ISSMSEnabled;
                cmd.Parameters.Add("@Status", SqlDbType.VarChar, 50).Value = visitorRequest.Status;
                cmd.Parameters.Add("@isperminete", SqlDbType.Bit, 50).Value = visitorRequest.PermitITEquipments;
                cmd.Parameters.Add("@RequestID", SqlDbType.VarChar, 50).Value = visitorRequest.RequestID;
                //cmd.Parameters.Add("@HostContactNo", SqlDbType.VarChar, 50).Value = visitorRequest.HostContactNo;
                cmd.Parameters.Add("@RequestStatus", SqlDbType.VarChar, 50).Value = visitorRequest.RequestStatus;
                //cmd.Parameters.Add("@HostDepartment", SqlDbType.VarChar, 50).Value = visitorRequest.HostDepartment;
                cmd.Parameters.Add("@OutlookNotfication", SqlDbType.Bit, 50).Value = visitorRequest.OutlookNotfication;
                cmd.Parameters.Add("@LastUpdatedby", SqlDbType.VarChar, 50).Value = visitorRequest.Createdby;
                //// int i = cmd.ExecuteNonQuery();
                int recAffected = cmd.ExecuteNonQuery();
                if (recAffected == -1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="visitorRequest">visitor Request</param>
        /// <returns>Datatable</returns>
        public bool UpdateBulkRequestDetails(VMSBusinessEntity.VisitorRequest visitorRequest)
        {
            SqlCommand cmd;
            SqlConnection con = null;
            try
            {
                string conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                con = new SqlConnection(conn);
                con.OpenWithMSI();
                cmd = new SqlCommand("usp_UpdateBulkAssociateDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@Country", SqlDbType.VarChar, 50).Value = visitorRequest.Country;
                //cmd.Parameters.Add("@City", SqlDbType.VarChar, 50).Value = visitorRequest.City;
                cmd.Parameters.Add("@Location", SqlDbType.VarChar, 50).Value = visitorRequest.Facility;
                cmd.Parameters.Add("@Purpose", SqlDbType.VarChar, 50).Value = visitorRequest.Purpose;
                cmd.Parameters.Add("@fromdate", SqlDbType.Date, 50).Value = visitorRequest.FromDate;
                cmd.Parameters.Add("@todate", SqlDbType.Date, 50).Value = visitorRequest.ToDate;
                cmd.Parameters.Add("@fromtime", SqlDbType.Time, 50).Value = visitorRequest.FromTime;
                cmd.Parameters.Add("@totime", SqlDbType.Time, 50).Value = visitorRequest.ToTime;
                //cmd.Parameters.Add("@recurrence", SqlDbType.VarChar, 50).Value = visitorRequest.RecurrencePattern;
                //cmd.Parameters.Add("@occurence", SqlDbType.VarChar, 50).Value = visitorRequest.Occurence;
                //cmd.Parameters.Add("@comments", SqlDbType.VarChar, 50).Value = visitorRequest.Comments;
                //cmd.Parameters.Add("@LocationID", SqlDbType.VarChar, 50).Value = visitorRequest.LocationId;
                cmd.Parameters.Add("@offset", SqlDbType.VarChar, 50).Value = "-330";
                cmd.Parameters.Add("@HostID", SqlDbType.VarChar, 50).Value = visitorRequest.HostID;
                //cmd.Parameters.Add("@ipAddress", SqlDbType.VarChar, 50).Value = visitorRequest.IPAddress;
                cmd.Parameters.Add("@isSMSEnable", SqlDbType.Bit, 50).Value = visitorRequest.ISSMSEnabled;
                cmd.Parameters.Add("@Status", SqlDbType.VarChar, 50).Value = visitorRequest.Status;
                cmd.Parameters.Add("@isperminete", SqlDbType.Bit, 50).Value = visitorRequest.PermitITEquipments;
                cmd.Parameters.Add("@RequestID", SqlDbType.VarChar, 50).Value = visitorRequest.RequestID;
                //cmd.Parameters.Add("@HostContactNo", SqlDbType.VarChar, 50).Value = visitorRequest.HostContactNo;
                cmd.Parameters.Add("@RequestStatus", SqlDbType.VarChar, 50).Value = visitorRequest.RequestStatus;
                //cmd.Parameters.Add("@HostDepartment", SqlDbType.VarChar, 50).Value = visitorRequest.HostDepartment;
                cmd.Parameters.Add("@OutlookNotfication", SqlDbType.Bit, 50).Value = visitorRequest.OutlookNotfication;
                cmd.Parameters.Add("@LastUpdatedby", SqlDbType.VarChar, 50).Value = visitorRequest.Createdby;
                //// int i = cmd.ExecuteNonQuery();
                int recAffected = cmd.ExecuteNonQuery();
                if (recAffected == -1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (SqlException)
            {
                throw;
            }
            catch (NullReferenceException)
            {
                throw;
            }
            catch (ArgumentException)
            {
                throw;
            }
            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// Get BulkInterview CandidateDetails
        /// </summary>
        /// <param name="parentReferenceId">parent Reference Id</param>
        /// <returns>Bulk Interview Candidate Details</returns>
        public DataTable GetBulkInterviewCandidateDetails(int parentReferenceId)
        {
            string sqlDetails = "GetBulkInterviewCandidateDetails";
            DataTable details = new DataTable();
            SqlConnection sqlConn =
                new SqlConnection(
                    System.Configuration.ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString());
            sqlConn.OpenWithMSI();
            try
            {
                SqlCommand cmdDetails = new SqlCommand(sqlDetails, sqlConn);
                cmdDetails.CommandType = CommandType.StoredProcedure;
                cmdDetails.Parameters.Add("@ParentReferenceID", SqlDbType.VarChar, 100).Value = parentReferenceId;
                SqlDataAdapter adp = new SqlDataAdapter(cmdDetails);
                adp.Fill(details);
                return details;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        /// <summary>
        /// Get Visit Details
        /// </summary>
        /// <param name="requestId">request Id</param>
        /// <returns>Data Table</returns>
        public DataTable GetVisitDetails(string requestId)
        {
            string sqlDetails = "GetVisitDetailsId";
            DataTable details = new DataTable();
            SqlConnection sqlConn =
                new SqlConnection(
                    System.Configuration.ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString());
            sqlConn.OpenWithMSI();
            try
            {
                SqlCommand cmdDetails = new SqlCommand(sqlDetails, sqlConn);
                cmdDetails.CommandType = CommandType.StoredProcedure;
                cmdDetails.Parameters.Add("@RequestId", SqlDbType.VarChar, 100).Value = requestId;
                SqlDataAdapter adp = new SqlDataAdapter(cmdDetails);
                adp.Fill(details);
                return details;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        /// <summary>
        /// Get Visit Details Using VisitID
        /// </summary>
        /// <param name="visitid">request Id</param>
        /// <returns>Data Table</returns>
        public DataTable GetVisitDetailsUsingVisitID(int visitid)
        {
            string sqlDetails = "usp_GetVisitDetailsUsingVisitID";
            DataTable details = new DataTable();
            SqlConnection sqlConn =
                new SqlConnection(
                    System.Configuration.ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString());
            sqlConn.OpenWithMSI();
            try
            {
                SqlCommand cmdDetails = new SqlCommand(sqlDetails, sqlConn);
                cmdDetails.CommandType = CommandType.StoredProcedure;
                cmdDetails.Parameters.Add("@VisitID", SqlDbType.Int).Value = visitid;
                SqlDataAdapter adp = new SqlDataAdapter(cmdDetails);
                adp.Fill(details);
                return details;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        /// <summary>
        /// Get BulkInterview CandidateDetails View
        /// </summary>
        /// <param name="parentReferenceId">parent Reference Id</param>
        /// <returns>Bulk Interview Candidate Details</returns>
        public DataTable GetBulkInterviewCandidateDetailsView(int parentReferenceId)
        {
            string sqlDetails = "GetBulkInterviewCandidateDetailsView";
            DataTable details = new DataTable();
            SqlConnection sqlConn =
                new SqlConnection(
                    System.Configuration.ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString());
            sqlConn.OpenWithMSI();
            try
            {
                SqlCommand cmdDetails = new SqlCommand(sqlDetails, sqlConn);
                cmdDetails.CommandType = CommandType.StoredProcedure;
                cmdDetails.Parameters.Add("@ParentReferenceID", SqlDbType.VarChar, 100).Value = parentReferenceId;
                SqlDataAdapter adp = new SqlDataAdapter(cmdDetails);
                adp.Fill(details);
                return details;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        /// <summary>
        /// Get Bulk Request
        /// </summary>
        /// <param name="visitDetailsId">visit Details Id</param>
        /// <returns>Bulk Request</returns>          
        public string GetBulkRequestStatus(string visitDetailsId)
        {
            string sqlBulkRequestStatus = string.Empty;
            string strRequestStatus = string.Empty;
            try
            {
                sqlBulkRequestStatus = "GetBulkRequestStatus";
                SqlDatabase sqlConn =
                    new SqlDatabase(DBConnection.Connectionstring());
                DbCommand loginUserNamecmd =
                    sqlConn.GetStoredProcCommand(sqlBulkRequestStatus);
                sqlConn.AddInParameter(
                    loginUserNamecmd,
                    "VisitDetailsID",
                    SqlDbType.VarChar,
                    visitDetailsId);
                sqlConn.AddOutParameter(
                    loginUserNamecmd,
                    "RequestStatus",
                    SqlDbType.VarChar,
                    100);
                loginUserNamecmd.CommandType = CommandType.StoredProcedure;
                sqlConn.ExecuteNonQuery(loginUserNamecmd);
                strRequestStatus =
                    sqlConn.GetParameterValue(loginUserNamecmd, "RequestStatus").ToString();
                return strRequestStatus;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
            catch (ArgumentException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Insert Equipment
        /// </summary>
        /// <param name="visitDetail">visit Detail</param>
        /// <param name="visitorEquip">Visitor Equip</param>
        public void InsertEquipment(VisitDetail[] visitDetail, VisitorEquipment[] visitorEquip)
        {
            try
            {
                VisitorEquipment[] visitorEquipMentCollection = null;
                ArrayList arrayList1 = new ArrayList();
                if (visitorEquip != null)
                {
                    foreach (VMSBusinessEntity.VisitDetail visitDetailObj in visitDetail)
                    {
                        foreach (VMSBusinessEntity.VisitorEquipment vistorEquipmentObj in visitorEquip)
                        {
                            vistorEquipmentObj.VisitDetailsID = visitDetailObj.VisitDetailsID;
                            VMSBusinessEntity.VisitorEquipment equipNew = new VisitorEquipment();
                            equipNew.VisitDetailsID = vistorEquipmentObj.VisitDetailsID;
                            equipNew.MasterDataID = vistorEquipmentObj.MasterDataID;
                            equipNew.Make = vistorEquipmentObj.Make;
                            equipNew.Model = vistorEquipmentObj.Model;

                            equipNew.SerialNo = vistorEquipmentObj.SerialNo;
                            equipNew.Others = vistorEquipmentObj.Others;
                            arrayList1.Add(equipNew);
                        }
                    }

                    visitorEquipMentCollection = new VMSBusinessEntity.VisitorEquipment[arrayList1.Count];
                    arrayList1.CopyTo(0, visitorEquipMentCollection, 0, arrayList1.Count);
                    using (TransactionScope scope = new TransactionScope())
                    {
                        SqlConnection connection = new SqlConnection(vmsConn);
                        connection.SetAccessToken();
                        using (VMSBusinessEntity.VMSDataObjectsDataContext vmsDatabase =
                            new VMSDataObjectsDataContext(connection))
                        {
                            ////vmsDatabase.Connection.Open();
                            foreach (VMSBusinessEntity.VisitorEquipment vistorEquipmentNew in visitorEquipMentCollection)
                            {
                                vmsDatabase.VisitorEquipments.InsertOnSubmit(vistorEquipmentNew);
                                vmsDatabase.SubmitChanges();
                            }

                            vmsDatabase.SubmitChanges();
                        }

                        scope.Complete();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Edit Visitor Information
        /// </summary>
        /// <param name="visitorProof">visitor Proof</param>
        /// <param name="visitorMasterObj">visitor Master </param>
        /// <param name="visitorRequestObj">visitor Request </param>
        /// <param name="visitDetailObj">visit Detail </param>
        /// <param name="visitorEquipmentObj">visitor Equipment </param>
        /// <param name="visitorEmergencyContactObj">visitor Emergency Contact </param>
        /// <param name="identityDetail">identity Detail</param>
        /// <returns>returns integer</returns>
        public int? EditVisitorInformationcall(
            VisitorProof visitorProof,
            VisitorMaster visitorMasterObj,
            VisitorRequest visitorRequestObj,
            VisitDetail[] visitDetailObj,
            VisitorEquipment[] visitorEquipmentObj,
            VisitorEmergencyContact visitorEmergencyContactObj,
            IdentityDetail identityDetail)
        {
            int? success = 0;
            try
            {
                success = this.EditVisitorInformation(
                    visitorProof,
                    visitorMasterObj,
                    visitorRequestObj,
                    visitDetailObj,
                    visitorEmergencyContactObj,
                    identityDetail);
                if (visitDetailObj != null)
                {
                    this.InsertEquipment(visitDetailObj, visitorEquipmentObj);
                }

                return success;
            }
            catch (NullReferenceException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Send Visitor Link
        /// </summary>
        /// <param name="hostId">Host Id</param>
        /// <param name="requestId">Request Id</param>
        /// <param name="emailId">Email Id</param>
        /// <returns>Visitor Information</returns>
        public int ResendVisitorLink(string hostId, int requestId, string emailId)
        {
            DataSet returnSet = new DataSet();
            returnSet = null;
            string sqlGetEmployeeInfoproc = "InsertLinkRequest";
            try
            {
                string conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                SqlDatabase sqlConn = new SqlDatabase(conn);
                DbCommand employeeInfoComm = sqlConn.GetStoredProcCommand(sqlGetEmployeeInfoproc);
                employeeInfoComm.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(employeeInfoComm, "HostID", SqlDbType.VarChar, hostId);
                sqlConn.AddInParameter(employeeInfoComm, "RequestID", SqlDbType.Int, requestId);
                sqlConn.AddInParameter(employeeInfoComm, "EmailID", SqlDbType.VarChar, emailId);
                returnSet = sqlConn.ExecuteDataSet(employeeInfoComm);
                return Convert.ToInt32(returnSet.Tables[0].Rows[0]["LinkID"].ToString());
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                returnSet = null;
            }
        }

        /// <summary>
        /// Get Associate Details
        /// </summary>
        /// <param name="associateId">Associate ID</param>
        /// <returns>Associate details</returns>
        public DataTable GetAssociateDeatils(string associateId)
        {
            DataSet returnSet = new DataSet();
            returnSet = null;
            string sqlGetEmployeeInfoproc = "VMS_GetAssociateDetails";
            try
            {
                string conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                SqlDatabase sqlConn = new SqlDatabase(conn);
                DbCommand employeeInfoComm = sqlConn.GetStoredProcCommand(sqlGetEmployeeInfoproc);
                employeeInfoComm.CommandType = CommandType.StoredProcedure;
                sqlConn.AddInParameter(employeeInfoComm, "ASSOCIATE_ID", SqlDbType.VarChar, associateId);
                returnSet = sqlConn.ExecuteDataSet(employeeInfoComm);
                DataTable userInfo = new DataTable();
                userInfo = returnSet.Tables[0];
                return userInfo;
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            finally
            {
                returnSet = null;
            }
        }

        /// <summary>
        /// Get list of Visitor ID
        /// </summary>
        /// <param name="visitorIDs">Visitor ID</param>
        /// <returns>files table</returns>
        private DataTable FillVisitorIDs(List<int> visitorIDs)
        {
            DataTable table = new DataTable();
            table.Columns.Add("VisitorID", typeof(int));
            foreach (var id in visitorIDs)
            {
                table.Rows.Add(id);
            }

            return table;
        }

        /// <summary>
        /// Get list of Visitor ID
        /// </summary>
        /// <param name="dc_Details">Visitor ID</param>
        /// <returns>files table</returns>
        private DataTable FillVisitorDetails(List<VisitorDCDetails> dc_Details)
        {
            DataTable table = new DataTable();
            table.Columns.Add("MasterVisitorID", typeof(int));
            table.Columns.Add("DCTempuniqueid", typeof(int));
            table.Columns.Add("dcid", typeof(int));
            table.Columns.Add("IdentityType", typeof(string));
            table.Columns.Add("IdentityValue", typeof(string));
            foreach (var id in dc_Details)
            {
                if (id.ArgIdentityType == "Select")
                {
                    id.ArgIdentityType = string.Empty;
                }

                table.Rows.Add(id.VisitorID, id.TempUniqueID, id.DCUniqueID, id.ArgIdentityType, id.ArgIdentityValue);
            }
            return table;
        }

        ///// <summary>
        ///// Get list of Visitor ID
        ///// </summary>
        ///// <param name="dc_Details">Visitor ID</param>
        ///// <returns>files table</returns>
        //private DataTable FillSavedVisitorDetails(List<SavedRequest> details)
        //{
        //    DataTable table = new DataTable();
        //    table.Columns.Add("MasterVisitorID", typeof(int));
        //    table.Columns.Add("WantDCAccess", typeof(string));
        //    table.Columns.Add("DCUniqueId", typeof(int));
        //    table.Columns.Add("IdentityType", typeof(string));
        //    table.Columns.Add("IdentityName", typeof(string));
        //    foreach (var id in details)
        //    {
        //        if (id.ArgIdentityType == "Select")
        //        {
        //            id.ArgIdentityType = string.Empty;
        //        }

        //        table.Rows.Add(id.VisitorID, id.WantDCAccess, id.DCUniqueId, id.ArgIdentityType, id.ArgIdentityValue);
        //    }
        //    return table;
        //}

        /// <summary>
        /// Get list of Visitor ID
        /// </summary>
        /// <param name="dc_Details">Visitor ID</param>
        /// <returns>files table</returns>
        private DataTable FillSavedLocationDetails(List<MultipleLocation> locationDetails)
        {
            DataTable table = new DataTable();
            table.Columns.Add("SelectedVisitors", typeof(string));
            table.Columns.Add("Country", typeof(string));
            table.Columns.Add("City", typeof(string));
            table.Columns.Add("Facility", typeof(string));
            table.Columns.Add("LocationId", typeof(int));
            table.Columns.Add("FomeTime", typeof(DateTime));
            table.Columns.Add("ToTime", typeof(DateTime));
            table.Columns.Add("FromDate", typeof(DateTime));
            table.Columns.Add("ToDate", typeof(DateTime));
            table.Columns.Add("RecurrencePattern", typeof(string));
            table.Columns.Add("Occurence", typeof(string));
            table.Columns.Add("NotifyArrival", typeof(bool));
            table.Columns.Add("IntegrateVisitor", typeof(bool));
            table.Columns.Add("CreatedDate", typeof(DateTime));

            DateTime createdDate = DateTime.Now;

            foreach (var data in locationDetails)
            {
                string selectedVisitors = string.Empty;
                foreach (var visitor in data.SelectedVisitors)
                {
                    selectedVisitors = selectedVisitors + visitor.VisitorID + ',';
                }
                selectedVisitors = selectedVisitors.Remove(selectedVisitors.Length - 1, 1);
                string occurrence = string.Empty;
                occurrence = data.Reccurrence.ToUpper() == "MONTHLY" ? data.Monthofday : data.WeeklyDays;
                table.Rows.Add(selectedVisitors, data.Country, data.City, data.Location, data.LocationID, data.FromTime,
                               data.ToTime, data.FromDate, data.ToDate, data.Reccurrence, occurrence, data.NotifyArrival, data.IntegarteOutlook, createdDate);
            }

            return table;
        }


        private DataTable FillSavedVisitorDCDetails(List<MultipleVisitor> visitorDetails)
        {
            DataTable table = new DataTable();
            table.Columns.Add("MasterVisitorID", typeof(int));
            table.Columns.Add("WantDCAccess", typeof(string));
            table.Columns.Add("DCUniqueId", typeof(int));
            table.Columns.Add("LocationId", typeof(int));


            foreach (var data in visitorDetails)
            {
                if (data.MultipleDCDetails != null)
                {
                    foreach (var dc in data.MultipleDCDetails)
                    {
                        table.Rows.Add(data.VisitorID, dc.WantDCAccess, dc.DCUniqueID, dc.LocationID);
                    }
                }
            }

            return table;
        }

        private DataTable FillSavedArgentinaDCDetails(List<MultipleVisitor> visitorDetails)
        {
            DataTable table = new DataTable();
            table.Columns.Add("MasterVisitorID", typeof(int));
            table.Columns.Add("IdentityType", typeof(string));
            table.Columns.Add("IdentityName", typeof(string));
            foreach (var data in visitorDetails)
            {
                if (!(string.IsNullOrEmpty(data.ArgIdentityType)))
                {
                    table.Rows.Add(data.VisitorID, data.ArgIdentityType, data.ArgIdentityValue);
                }
            }

            return table;
        }



        /// <summary>
        /// Fill Candidate List
        /// </summary>
        /// <param name="interviewCandidateList">interview Candidate List</param>
        /// <returns>returns table</returns>
        private DataTable FillCandidateList(DataTable interviewCandidateList)
        {
            DataTable table = new DataTable();
            int i = 1;
            table.Columns.Add("ID", typeof(int));
            table.Columns.Add("FirstName", typeof(string));
            table.Columns.Add("LastName", typeof(string));
            table.Columns.Add("Gender", typeof(string));
            table.Columns.Add("Email", typeof(string));
            table.Columns.Add("Mobile", typeof(string));

            for (int j = 0; j < interviewCandidateList.Rows.Count; j++)
            {
                table.Rows.Add(i, interviewCandidateList.Rows[j]["FirstName"], interviewCandidateList.Rows[j]["LastName"], interviewCandidateList.Rows[j]["Gender"], interviewCandidateList.Rows[j]["Email"], interviewCandidateList.Rows[j]["Mobile"]);
                i++;
            }

            return table;
        }

        /// <summary>
        /// Get list of Visitor ID
        /// </summary>
        /// <param name="visitorIDs">Visitor ID</param>
        /// <returns>files table</returns>
        private DataTable FillRequestIDs(List<int> requestIDs)
        {
            DataTable table = new DataTable();
            table.Columns.Add("RequestID", typeof(int));
            foreach (var id in requestIDs)
            {
                table.Rows.Add(id);
            }

            return table;
        }


        /// <summary>
        /// class for properties
        /// </summary>
        /// <code>
        /// Propertie sDC class
        /// </code>
        public class PropertiesDC
        {
            /// <summary>
            /// visitor Master
            /// </summary>
            private VisitorMaster visitorMaster;

            /// <summary>
            /// visitor Request 
            /// </summary>
            private VisitorRequest visitorRequest;

            /// <summary>
            /// visitor Equipment
            /// </summary>
            private IList<VisitorEquipment> visitorEquipment;

            /// <summary>
            /// visitor Emergency Contact
            /// </summary>
            private VisitorEmergencyContact visitorEmergencyContact;

            /// <summary>
            /// visitor Proof
            /// </summary>
            private VisitorProof visitorProof;

            /// <summary>
            /// visitors Master
            /// </summary>
            private IList<VisitorMaster> visitorsMaster;

            #region properties

            /// <summary>
            /// Gets or sets Visitor Master Property
            /// </summary>
            public VisitorMaster VisitorMasterProperty
            {
                get
                {
                    return this.visitorMaster;
                }

                set
                {
                    this.visitorMaster = value;
                }
            }

            /// <summary>
            /// Gets or sets Visitor Request Property
            /// </summary>
            public VisitorRequest VisitorRequestProperty
            {
                get
                {
                    return this.visitorRequest;
                }

                set
                {
                    this.visitorRequest = value;
                }
            }

            /// <summary>
            /// Gets or sets Visitor Proof Property
            /// </summary>
            public VisitorProof VisitorProofProperty
            {
                get
                {
                    return this.visitorProof;
                }

                set
                {
                    this.visitorProof = value;
                }
            }

            /// <summary>
            /// Gets or sets Visitor Equipment Property
            /// </summary>
            public IList<VisitorEquipment> VisitorEquipmentProperty
            {
                get
                {
                    return this.visitorEquipment;
                }

                set
                {
                    this.visitorEquipment = value;
                }
            }

            /// <summary>
            /// Gets or sets Visitors Master
            /// </summary>
            public IList<VisitorMaster> VisitorsMaster
            {
                get
                {
                    return this.visitorsMaster;
                }

                set
                {
                    this.visitorsMaster = value;
                }
            }

            /// <summary>
            /// Gets or sets Visitor Emergency Contact Property
            /// </summary>
            public VisitorEmergencyContact VisitorEmergencyContactProperty
            {
                get
                {
                    return this.visitorEmergencyContact;
                }

                set
                {
                    this.visitorEmergencyContact = value;
                }
            }

            /// <summary>
            /// Gets or sets Identity Details
            /// </summary>
            public IdentityDetail IdentityDetails
            {
                get;
                set;
            }

            #endregion
        }

        /// <summary>
        /// Database Connection
        /// </summary>
        private static class DBConnection
        {
            /// <summary>
            /// Purpose : Method to retrieve connection string from config file and send to calling place.   
            /// </summary>
            /// <returns>connection string</returns>
            public static string Connectionstring()
            {
                string conn = string.Empty;
                try
                {
                    conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
                    return conn;
                }
                catch (ConfigurationException ex)
                {
                    throw ex;
                }
            }
        }


        //getting readonly Connection string 

        private static SqlConnection GetSqlConnection(bool useReadOnly = false)
        {
            string conn = string.Empty;
            string Readonlyconn = string.Empty;
            conn = ConfigurationManager.ConnectionStrings["VMSConnectionString"].ToString();
            Readonlyconn = ConfigurationManager.ConnectionStrings["VMSConnectionStringSecondary"].ToString();
            string connectionString = useReadOnly ? Readonlyconn : conn;
            SqlConnection sqlConnecting = new SqlConnection();
            try
            {
                sqlConnecting.ConnectionString = connectionString;
            }
            catch (ConfigurationException ex)
            {
                throw ex;
            }
            return sqlConnecting;
        }

    }
}
